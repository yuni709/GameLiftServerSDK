// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sdk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace amazon {
namespace whitewater {
namespace auxproxy {
namespace pbuffer {
class ProcessReadyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProcessReady> {
} _ProcessReady_default_instance_;
class ProcessEndingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProcessEnding> {
} _ProcessEnding_default_instance_;
class GameSessionActivateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameSessionActivate> {
} _GameSessionActivate_default_instance_;
class GameSessionTerminateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameSessionTerminate> {
} _GameSessionTerminate_default_instance_;
class UpdatePlayerSessionCreationPolicyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdatePlayerSessionCreationPolicy> {
} _UpdatePlayerSessionCreationPolicy_default_instance_;
class AcceptPlayerSessionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AcceptPlayerSession> {
} _AcceptPlayerSession_default_instance_;
class RemovePlayerSessionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RemovePlayerSession> {
} _RemovePlayerSession_default_instance_;
class ReportHealthDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReportHealth> {
} _ReportHealth_default_instance_;
class DescribePlayerSessionsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DescribePlayerSessionsRequest> {
} _DescribePlayerSessionsRequest_default_instance_;
class BackfillMatchmakingRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BackfillMatchmakingRequest> {
} _BackfillMatchmakingRequest_default_instance_;
class StopMatchmakingRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StopMatchmakingRequest> {
} _StopMatchmakingRequest_default_instance_;
class GetInstanceCertificateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetInstanceCertificate> {
} _GetInstanceCertificate_default_instance_;
class ActivateGameSessionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ActivateGameSession> {
} _ActivateGameSession_default_instance_;
class TerminateProcessDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TerminateProcess> {
} _TerminateProcess_default_instance_;
class DescribePlayerSessionsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DescribePlayerSessionsResponse> {
} _DescribePlayerSessionsResponse_default_instance_;
class UpdateGameSessionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateGameSession> {
} _UpdateGameSession_default_instance_;
class GetInstanceCertificateResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GetInstanceCertificateResponse> {
} _GetInstanceCertificateResponse_default_instance_;
class BackfillMatchmakingResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BackfillMatchmakingResponse> {
} _BackfillMatchmakingResponse_default_instance_;
class ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Response> {
} _Response_default_instance_;
class GameLiftResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameLiftResponse> {
} _GameLiftResponse_default_instance_;
class GameSessionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameSession> {
} _GameSession_default_instance_;
class GamePropertyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameProperty> {
} _GameProperty_default_instance_;
class PlayerSessionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlayerSession> {
} _PlayerSession_default_instance_;
class Player_PlayerAttributesEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Player::Player_PlayerAttributesEntry> {
} _Player_PlayerAttributesEntry_default_instance_;
class Player_LatencyInMsEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Player::Player_LatencyInMsEntry> {
} _Player_LatencyInMsEntry_default_instance_;
class PlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Player> {
} _Player_default_instance_;
class AttributeValue_SDMEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AttributeValue::AttributeValue_SDMEntry> {
} _AttributeValue_SDMEntry_default_instance_;
class AttributeValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AttributeValue> {
} _AttributeValue_default_instance_;

namespace protobuf_sdk_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[28];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessReady, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessReady, logpathstoupload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessReady, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessReady, maxconcurrentgamesessions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessEnding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionActivate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionActivate, gamesessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionActivate, maxplayers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionActivate, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionTerminate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSessionTerminate, gamesessionid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerSessionCreationPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerSessionCreationPolicy, gamesessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePlayerSessionCreationPolicy, newplayersessioncreationpolicy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptPlayerSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptPlayerSession, gamesessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptPlayerSession, playersessionid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePlayerSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePlayerSession, gamesessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemovePlayerSession, playersessionid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportHealth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportHealth, healthstatus_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescribePlayerSessionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescribePlayerSessionsRequest, gamesessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescribePlayerSessionsRequest, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescribePlayerSessionsRequest, playersessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescribePlayerSessionsRequest, playersessionstatusfilter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescribePlayerSessionsRequest, nexttoken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescribePlayerSessionsRequest, limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackfillMatchmakingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackfillMatchmakingRequest, ticketid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackfillMatchmakingRequest, gamesessionarn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackfillMatchmakingRequest, matchmakingconfigurationarn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackfillMatchmakingRequest, players_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopMatchmakingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopMatchmakingRequest, ticketid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopMatchmakingRequest, gamesessionarn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopMatchmakingRequest, matchmakingconfigurationarn_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceCertificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivateGameSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivateGameSession, gamesession_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminateProcess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminateProcess, terminationtime_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescribePlayerSessionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescribePlayerSessionsResponse, nexttoken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DescribePlayerSessionsResponse, playersessions_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGameSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGameSession, gamesession_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGameSession, updatereason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGameSession, backfillticketid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceCertificateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceCertificateResponse, certificatepath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceCertificateResponse, certificatechainpath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceCertificateResponse, privatekeypath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceCertificateResponse, hostname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceCertificateResponse, rootcertificatepath_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackfillMatchmakingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackfillMatchmakingResponse, ticketid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, errormessage_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLiftResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLiftResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLiftResponse, responsedata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLiftResponse, errormessage_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSession, gamesessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSession, fleetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSession, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSession, maxplayers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSession, joinable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSession, gameproperties_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSession, ipaddress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSession, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSession, gamesessiondata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSession, matchmakerdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSession, dnsname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameProperty, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameProperty, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, playersessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, gamesessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, fleetid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, ipaddress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, creationtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, terminationtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, playerdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSession, dnsname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, playerattributes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, latencyinms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeValue, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeValue, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeValue, n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeValue, sl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttributeValue, sdm_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ProcessReady)},
  { 8, -1, sizeof(ProcessEnding)},
  { 13, -1, sizeof(GameSessionActivate)},
  { 21, -1, sizeof(GameSessionTerminate)},
  { 27, -1, sizeof(UpdatePlayerSessionCreationPolicy)},
  { 34, -1, sizeof(AcceptPlayerSession)},
  { 41, -1, sizeof(RemovePlayerSession)},
  { 48, -1, sizeof(ReportHealth)},
  { 54, -1, sizeof(DescribePlayerSessionsRequest)},
  { 65, -1, sizeof(BackfillMatchmakingRequest)},
  { 74, -1, sizeof(StopMatchmakingRequest)},
  { 82, -1, sizeof(GetInstanceCertificate)},
  { 87, -1, sizeof(ActivateGameSession)},
  { 93, -1, sizeof(TerminateProcess)},
  { 99, -1, sizeof(DescribePlayerSessionsResponse)},
  { 106, -1, sizeof(UpdateGameSession)},
  { 114, -1, sizeof(GetInstanceCertificateResponse)},
  { 124, -1, sizeof(BackfillMatchmakingResponse)},
  { 130, -1, sizeof(Response)},
  { 137, -1, sizeof(GameLiftResponse)},
  { 145, -1, sizeof(GameSession)},
  { 161, -1, sizeof(GameProperty)},
  { 168, -1, sizeof(PlayerSession)},
  { 184, -1, sizeof(Player)},
  { 193, -1, sizeof(AttributeValue)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProcessReady_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProcessEnding_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameSessionActivate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameSessionTerminate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdatePlayerSessionCreationPolicy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AcceptPlayerSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RemovePlayerSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReportHealth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DescribePlayerSessionsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackfillMatchmakingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StopMatchmakingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetInstanceCertificate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ActivateGameSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TerminateProcess_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DescribePlayerSessionsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateGameSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetInstanceCertificateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackfillMatchmakingResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameLiftResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameProperty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Player_PlayerAttributesEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Player_LatencyInMsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AttributeValue_SDMEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AttributeValue_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sdk.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[23].reflection = Player::Player_PlayerAttributesEntry::CreateReflection(file_level_metadata[23].descriptor, _Player_PlayerAttributesEntry_default_instance_.get_mutable());
file_level_metadata[24].reflection = Player::Player_LatencyInMsEntry::CreateReflection(file_level_metadata[24].descriptor, _Player_LatencyInMsEntry_default_instance_.get_mutable());
file_level_metadata[26].reflection = AttributeValue::AttributeValue_SDMEntry::CreateReflection(file_level_metadata[26].descriptor, _AttributeValue_SDMEntry_default_instance_.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 28);
}

}  // namespace

void TableStruct::Shutdown() {
  _ProcessReady_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ProcessEnding_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _GameSessionActivate_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _GameSessionTerminate_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _UpdatePlayerSessionCreationPolicy_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _AcceptPlayerSession_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _RemovePlayerSession_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ReportHealth_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _DescribePlayerSessionsRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _BackfillMatchmakingRequest_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _StopMatchmakingRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _GetInstanceCertificate_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _ActivateGameSession_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _TerminateProcess_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _DescribePlayerSessionsResponse_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _UpdateGameSession_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _GetInstanceCertificateResponse_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _BackfillMatchmakingResponse_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _Response_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _GameLiftResponse_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _GameSession_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _GameProperty_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _PlayerSession_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _Player_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _AttributeValue_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  delete file_level_metadata[23].reflection;
  delete file_level_metadata[24].reflection;
  delete file_level_metadata[26].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ProcessReady_default_instance_.DefaultConstruct();
  _ProcessEnding_default_instance_.DefaultConstruct();
  _GameSessionActivate_default_instance_.DefaultConstruct();
  _GameSessionTerminate_default_instance_.DefaultConstruct();
  _UpdatePlayerSessionCreationPolicy_default_instance_.DefaultConstruct();
  _AcceptPlayerSession_default_instance_.DefaultConstruct();
  _RemovePlayerSession_default_instance_.DefaultConstruct();
  _ReportHealth_default_instance_.DefaultConstruct();
  _DescribePlayerSessionsRequest_default_instance_.DefaultConstruct();
  _BackfillMatchmakingRequest_default_instance_.DefaultConstruct();
  _StopMatchmakingRequest_default_instance_.DefaultConstruct();
  _GetInstanceCertificate_default_instance_.DefaultConstruct();
  _ActivateGameSession_default_instance_.DefaultConstruct();
  _TerminateProcess_default_instance_.DefaultConstruct();
  _DescribePlayerSessionsResponse_default_instance_.DefaultConstruct();
  _UpdateGameSession_default_instance_.DefaultConstruct();
  _GetInstanceCertificateResponse_default_instance_.DefaultConstruct();
  _BackfillMatchmakingResponse_default_instance_.DefaultConstruct();
  _Response_default_instance_.DefaultConstruct();
  _GameLiftResponse_default_instance_.DefaultConstruct();
  _GameSession_default_instance_.DefaultConstruct();
  _GameProperty_default_instance_.DefaultConstruct();
  _PlayerSession_default_instance_.DefaultConstruct();
  _Player_PlayerAttributesEntry_default_instance_.DefaultConstruct();
  _Player_LatencyInMsEntry_default_instance_.DefaultConstruct();
  _Player_default_instance_.DefaultConstruct();
  _AttributeValue_SDMEntry_default_instance_.DefaultConstruct();
  _AttributeValue_default_instance_.DefaultConstruct();
  _ActivateGameSession_default_instance_.get_mutable()->gamesession_ = const_cast< ::com::amazon::whitewater::auxproxy::pbuffer::GameSession*>(
      ::com::amazon::whitewater::auxproxy::pbuffer::GameSession::internal_default_instance());
  _UpdateGameSession_default_instance_.get_mutable()->gamesession_ = const_cast< ::com::amazon::whitewater::auxproxy::pbuffer::GameSession*>(
      ::com::amazon::whitewater::auxproxy::pbuffer::GameSession::internal_default_instance());
  _Player_PlayerAttributesEntry_default_instance_.get_mutable()->set_default_instance(_Player_PlayerAttributesEntry_default_instance_.get_mutable());
  _Player_PlayerAttributesEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _Player_LatencyInMsEntry_default_instance_.get_mutable()->set_default_instance(_Player_LatencyInMsEntry_default_instance_.get_mutable());
  _Player_LatencyInMsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _AttributeValue_SDMEntry_default_instance_.get_mutable()->set_default_instance(_AttributeValue_SDMEntry_default_instance_.get_mutable());
  _AttributeValue_SDMEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\tsdk.proto\022&com.amazon.whitewater.auxpr"
      "oxy.pbuffer\"Y\n\014ProcessReady\022\030\n\020logPathsT"
      "oUpload\030\001 \003(\t\022\014\n\004port\030\002 \001(\005\022!\n\031maxConcur"
      "rentGameSessions\030\003 \001(\005\"\017\n\rProcessEnding\""
      "N\n\023GameSessionActivate\022\025\n\rgameSessionId\030"
      "\001 \001(\t\022\022\n\nmaxPlayers\030\002 \001(\005\022\014\n\004port\030\003 \001(\005\""
      "-\n\024GameSessionTerminate\022\025\n\rgameSessionId"
      "\030\001 \001(\t\"b\n!UpdatePlayerSessionCreationPol"
      "icy\022\025\n\rgameSessionId\030\001 \001(\t\022&\n\036newPlayerS"
      "essionCreationPolicy\030\002 \001(\t\"E\n\023AcceptPlay"
      "erSession\022\025\n\rgameSessionId\030\001 \001(\t\022\027\n\017play"
      "erSessionId\030\002 \001(\t\"E\n\023RemovePlayerSession"
      "\022\025\n\rgameSessionId\030\001 \001(\t\022\027\n\017playerSession"
      "Id\030\002 \001(\t\"$\n\014ReportHealth\022\024\n\014healthStatus"
      "\030\001 \001(\010\"\246\001\n\035DescribePlayerSessionsRequest"
      "\022\025\n\rgameSessionId\030\001 \001(\t\022\020\n\010playerId\030\002 \001("
      "\t\022\027\n\017playerSessionId\030\003 \001(\t\022!\n\031playerSess"
      "ionStatusFilter\030\004 \001(\t\022\021\n\tnextToken\030\005 \001(\t"
      "\022\r\n\005limit\030\006 \001(\005\"\254\001\n\032BackfillMatchmakingR"
      "equest\022\020\n\010ticketId\030\001 \001(\t\022\026\n\016gameSessionA"
      "rn\030\002 \001(\t\022#\n\033matchmakingConfigurationArn\030"
      "\003 \001(\t\022\?\n\007players\030\004 \003(\0132..com.amazon.whit"
      "ewater.auxproxy.pbuffer.Player\"g\n\026StopMa"
      "tchmakingRequest\022\020\n\010ticketId\030\001 \001(\t\022\026\n\016ga"
      "meSessionArn\030\002 \001(\t\022#\n\033matchmakingConfigu"
      "rationArn\030\003 \001(\t\"\030\n\026GetInstanceCertificat"
      "e\"_\n\023ActivateGameSession\022H\n\013gameSession\030"
      "\001 \001(\01323.com.amazon.whitewater.auxproxy.p"
      "buffer.GameSession\"+\n\020TerminateProcess\022\027"
      "\n\017terminationTime\030\001 \001(\003\"\202\001\n\036DescribePlay"
      "erSessionsResponse\022\021\n\tnextToken\030\001 \001(\t\022M\n"
      "\016playerSessions\030\002 \003(\01325.com.amazon.white"
      "water.auxproxy.pbuffer.PlayerSession\"\215\001\n"
      "\021UpdateGameSession\022H\n\013gameSession\030\001 \001(\0132"
      "3.com.amazon.whitewater.auxproxy.pbuffer"
      ".GameSession\022\024\n\014updateReason\030\002 \001(\t\022\030\n\020ba"
      "ckfillTicketId\030\003 \001(\t\"\236\001\n\036GetInstanceCert"
      "ificateResponse\022\027\n\017certificatePath\030\001 \001(\t"
      "\022\034\n\024certificateChainPath\030\002 \001(\t\022\026\n\016privat"
      "eKeyPath\030\003 \001(\t\022\020\n\010hostName\030\004 \001(\t\022\033\n\023root"
      "CertificatePath\030\005 \001(\t\"/\n\033BackfillMatchma"
      "kingResponse\022\020\n\010ticketId\030\001 \001(\t\"\206\001\n\010Respo"
      "nse\022G\n\006status\030\001 \001(\01627.com.amazon.whitewa"
      "ter.auxproxy.pbuffer.Response.Status\022\024\n\014"
      "errorMessage\030\002 \001(\t\"\033\n\006Status\022\006\n\002OK\020\000\022\t\n\005"
      "ERROR\020\001\"\277\001\n\020GameLiftResponse\022O\n\006status\030\001"
      " \001(\0162\?.com.amazon.whitewater.auxproxy.pb"
      "uffer.GameLiftResponse.Status\022\024\n\014respons"
      "eData\030\002 \001(\t\022\024\n\014errorMessage\030\003 \001(\t\".\n\006Sta"
      "tus\022\006\n\002OK\020\000\022\r\n\tERROR_400\020\001\022\r\n\tERROR_500\020"
      "\002\"\232\002\n\013GameSession\022\025\n\rgameSessionId\030\001 \001(\t"
      "\022\017\n\007fleetId\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\022\n\nmaxPl"
      "ayers\030\004 \001(\005\022\020\n\010joinable\030\005 \001(\010\022L\n\016gamePro"
      "perties\030\006 \003(\01324.com.amazon.whitewater.au"
      "xproxy.pbuffer.GameProperty\022\021\n\tipAddress"
      "\030\007 \001(\t\022\014\n\004port\030\010 \001(\005\022\027\n\017gameSessionData\030"
      "\t \001(\t\022\026\n\016matchmakerData\030\n \001(\t\022\017\n\007dnsName"
      "\030\013 \001(\t\"*\n\014GameProperty\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
      "alue\030\002 \001(\t\"\347\001\n\rPlayerSession\022\027\n\017playerSe"
      "ssionId\030\001 \001(\t\022\020\n\010playerId\030\002 \001(\t\022\025\n\rgameS"
      "essionId\030\003 \001(\t\022\017\n\007fleetId\030\004 \001(\t\022\021\n\tipAdd"
      "ress\030\005 \001(\t\022\016\n\006status\030\006 \001(\t\022\024\n\014creationTi"
      "me\030\007 \001(\003\022\027\n\017terminationTime\030\010 \001(\003\022\014\n\004por"
      "t\030\t \001(\005\022\022\n\nplayerData\030\n \001(\t\022\017\n\007dnsName\030\013"
      " \001(\t\"\203\003\n\006Player\022\020\n\010playerId\030\001 \001(\t\022^\n\020pla"
      "yerAttributes\030\002 \003(\0132D.com.amazon.whitewa"
      "ter.auxproxy.pbuffer.Player.PlayerAttrib"
      "utesEntry\022\014\n\004team\030\003 \001(\t\022T\n\013latencyInMs\030\004"
      " \003(\0132\?.com.amazon.whitewater.auxproxy.pb"
      "uffer.Player.LatencyInMsEntry\032o\n\025PlayerA"
      "ttributesEntry\022\013\n\003key\030\001 \001(\t\022E\n\005value\030\002 \001"
      "(\01326.com.amazon.whitewater.auxproxy.pbuf"
      "fer.AttributeValue:\0028\001\0322\n\020LatencyInMsEnt"
      "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\"\272\001\n\016A"
      "ttributeValue\022\014\n\004type\030\001 \001(\005\022\t\n\001S\030\002 \001(\t\022\t"
      "\n\001N\030\003 \001(\001\022\n\n\002SL\030\004 \003(\t\022L\n\003SDM\030\005 \003(\0132\?.com"
      ".amazon.whitewater.auxproxy.pbuffer.Attr"
      "ibuteValue.SDMEntry\032*\n\010SDMEntry\022\013\n\003key\030\001"
      " \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3151);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sdk.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_sdk_2eproto

const ::google::protobuf::EnumDescriptor* Response_Status_descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_enum_descriptors[0];
}
bool Response_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Response_Status Response::OK;
const Response_Status Response::ERROR;
const Response_Status Response::Status_MIN;
const Response_Status Response::Status_MAX;
const int Response::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GameLiftResponse_Status_descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_enum_descriptors[1];
}
bool GameLiftResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GameLiftResponse_Status GameLiftResponse::OK;
const GameLiftResponse_Status GameLiftResponse::ERROR_400;
const GameLiftResponse_Status GameLiftResponse::ERROR_500;
const GameLiftResponse_Status GameLiftResponse::Status_MIN;
const GameLiftResponse_Status GameLiftResponse::Status_MAX;
const int GameLiftResponse::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProcessReady::kLogPathsToUploadFieldNumber;
const int ProcessReady::kPortFieldNumber;
const int ProcessReady::kMaxConcurrentGameSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessReady::ProcessReady()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
}
ProcessReady::ProcessReady(const ProcessReady& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      logpathstoupload_(from.logpathstoupload_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&port_, &from.port_,
    reinterpret_cast<char*>(&maxconcurrentgamesessions_) -
    reinterpret_cast<char*>(&port_) + sizeof(maxconcurrentgamesessions_));
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
}

void ProcessReady::SharedCtor() {
  ::memset(&port_, 0, reinterpret_cast<char*>(&maxconcurrentgamesessions_) -
    reinterpret_cast<char*>(&port_) + sizeof(maxconcurrentgamesessions_));
  _cached_size_ = 0;
}

ProcessReady::~ProcessReady() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  SharedDtor();
}

void ProcessReady::SharedDtor() {
}

void ProcessReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessReady::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProcessReady& ProcessReady::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProcessReady* ProcessReady::New(::google::protobuf::Arena* arena) const {
  ProcessReady* n = new ProcessReady;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProcessReady::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  logpathstoupload_.Clear();
  ::memset(&port_, 0, reinterpret_cast<char*>(&maxconcurrentgamesessions_) -
    reinterpret_cast<char*>(&port_) + sizeof(maxconcurrentgamesessions_));
}

bool ProcessReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string logPathsToUpload = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_logpathstoupload()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->logpathstoupload(this->logpathstoupload_size() - 1).data(),
            this->logpathstoupload(this->logpathstoupload_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maxConcurrentGameSessions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxconcurrentgamesessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  return false;
#undef DO_
}

void ProcessReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string logPathsToUpload = 1;
  for (int i = 0, n = this->logpathstoupload_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logpathstoupload(i).data(), this->logpathstoupload(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->logpathstoupload(i), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // int32 maxConcurrentGameSessions = 3;
  if (this->maxconcurrentgamesessions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxconcurrentgamesessions(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
}

::google::protobuf::uint8* ProcessReady::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string logPathsToUpload = 1;
  for (int i = 0, n = this->logpathstoupload_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logpathstoupload(i).data(), this->logpathstoupload(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->logpathstoupload(i), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // int32 maxConcurrentGameSessions = 3;
  if (this->maxconcurrentgamesessions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxconcurrentgamesessions(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  return target;
}

size_t ProcessReady::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  size_t total_size = 0;

  // repeated string logPathsToUpload = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->logpathstoupload_size());
  for (int i = 0, n = this->logpathstoupload_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->logpathstoupload(i));
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 maxConcurrentGameSessions = 3;
  if (this->maxconcurrentgamesessions() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxconcurrentgamesessions());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessReady::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessReady* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProcessReady>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
    MergeFrom(*source);
  }
}

void ProcessReady::MergeFrom(const ProcessReady& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logpathstoupload_.MergeFrom(from.logpathstoupload_);
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.maxconcurrentgamesessions() != 0) {
    set_maxconcurrentgamesessions(from.maxconcurrentgamesessions());
  }
}

void ProcessReady::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessReady::CopyFrom(const ProcessReady& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessReady::IsInitialized() const {
  return true;
}

void ProcessReady::Swap(ProcessReady* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessReady::InternalSwap(ProcessReady* other) {
  logpathstoupload_.InternalSwap(&other->logpathstoupload_);
  std::swap(port_, other->port_);
  std::swap(maxconcurrentgamesessions_, other->maxconcurrentgamesessions_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProcessReady::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProcessReady

// repeated string logPathsToUpload = 1;
int ProcessReady::logpathstoupload_size() const {
  return logpathstoupload_.size();
}
void ProcessReady::clear_logpathstoupload() {
  logpathstoupload_.Clear();
}
const ::std::string& ProcessReady::logpathstoupload(int index) const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
  return logpathstoupload_.Get(index);
}
::std::string* ProcessReady::mutable_logpathstoupload(int index) {
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
  return logpathstoupload_.Mutable(index);
}
void ProcessReady::set_logpathstoupload(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
  logpathstoupload_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ProcessReady::set_logpathstoupload(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
  logpathstoupload_.Mutable(index)->assign(std::move(value));
}
#endif
void ProcessReady::set_logpathstoupload(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  logpathstoupload_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
}
void ProcessReady::set_logpathstoupload(int index, const char* value, size_t size) {
  logpathstoupload_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
}
::std::string* ProcessReady::add_logpathstoupload() {
  // @@protoc_insertion_point(field_add_mutable:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
  return logpathstoupload_.Add();
}
void ProcessReady::add_logpathstoupload(const ::std::string& value) {
  logpathstoupload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
}
#if LANG_CXX11
void ProcessReady::add_logpathstoupload(::std::string&& value) {
  logpathstoupload_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
}
#endif
void ProcessReady::add_logpathstoupload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  logpathstoupload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
}
void ProcessReady::add_logpathstoupload(const char* value, size_t size) {
  logpathstoupload_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessReady::logpathstoupload() const {
  // @@protoc_insertion_point(field_list:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
  return logpathstoupload_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessReady::mutable_logpathstoupload() {
  // @@protoc_insertion_point(field_mutable_list:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
  return &logpathstoupload_;
}

// int32 port = 2;
void ProcessReady::clear_port() {
  port_ = 0;
}
::google::protobuf::int32 ProcessReady::port() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.port)
  return port_;
}
void ProcessReady::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.port)
}

// int32 maxConcurrentGameSessions = 3;
void ProcessReady::clear_maxconcurrentgamesessions() {
  maxconcurrentgamesessions_ = 0;
}
::google::protobuf::int32 ProcessReady::maxconcurrentgamesessions() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.maxConcurrentGameSessions)
  return maxconcurrentgamesessions_;
}
void ProcessReady::set_maxconcurrentgamesessions(::google::protobuf::int32 value) {
  
  maxconcurrentgamesessions_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.maxConcurrentGameSessions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProcessEnding::ProcessEnding()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
}
ProcessEnding::ProcessEnding(const ProcessEnding& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
}

void ProcessEnding::SharedCtor() {
  _cached_size_ = 0;
}

ProcessEnding::~ProcessEnding() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  SharedDtor();
}

void ProcessEnding::SharedDtor() {
}

void ProcessEnding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessEnding::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProcessEnding& ProcessEnding::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProcessEnding* ProcessEnding::New(::google::protobuf::Arena* arena) const {
  ProcessEnding* n = new ProcessEnding;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProcessEnding::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
}

bool ProcessEnding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  return false;
#undef DO_
}

void ProcessEnding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
}

::google::protobuf::uint8* ProcessEnding::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  return target;
}

size_t ProcessEnding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessEnding::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessEnding* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProcessEnding>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
    MergeFrom(*source);
  }
}

void ProcessEnding::MergeFrom(const ProcessEnding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ProcessEnding::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessEnding::CopyFrom(const ProcessEnding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessEnding::IsInitialized() const {
  return true;
}

void ProcessEnding::Swap(ProcessEnding* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProcessEnding::InternalSwap(ProcessEnding* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProcessEnding::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProcessEnding

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameSessionActivate::kGameSessionIdFieldNumber;
const int GameSessionActivate::kMaxPlayersFieldNumber;
const int GameSessionActivate::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSessionActivate::GameSessionActivate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
}
GameSessionActivate::GameSessionActivate(const GameSessionActivate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamesessionid().size() > 0) {
    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  ::memcpy(&maxplayers_, &from.maxplayers_,
    reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&maxplayers_) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
}

void GameSessionActivate::SharedCtor() {
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxplayers_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&maxplayers_) + sizeof(port_));
  _cached_size_ = 0;
}

GameSessionActivate::~GameSessionActivate() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  SharedDtor();
}

void GameSessionActivate::SharedDtor() {
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameSessionActivate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSessionActivate::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameSessionActivate& GameSessionActivate::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameSessionActivate* GameSessionActivate::New(::google::protobuf::Arena* arena) const {
  GameSessionActivate* n = new GameSessionActivate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameSessionActivate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxplayers_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&maxplayers_) + sizeof(port_));
}

bool GameSessionActivate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gameSessionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamesessionid().data(), this->gamesessionid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maxPlayers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  return false;
#undef DO_
}

void GameSessionActivate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamesessionid(), output);
  }

  // int32 maxPlayers = 2;
  if (this->maxplayers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxplayers(), output);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
}

::google::protobuf::uint8* GameSessionActivate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesessionid(), target);
  }

  // int32 maxPlayers = 2;
  if (this->maxplayers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxplayers(), target);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  return target;
}

size_t GameSessionActivate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  size_t total_size = 0;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessionid());
  }

  // int32 maxPlayers = 2;
  if (this->maxplayers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxplayers());
  }

  // int32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameSessionActivate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSessionActivate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameSessionActivate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
    MergeFrom(*source);
  }
}

void GameSessionActivate::MergeFrom(const GameSessionActivate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gamesessionid().size() > 0) {

    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  if (from.maxplayers() != 0) {
    set_maxplayers(from.maxplayers());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void GameSessionActivate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSessionActivate::CopyFrom(const GameSessionActivate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSessionActivate::IsInitialized() const {
  return true;
}

void GameSessionActivate::Swap(GameSessionActivate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSessionActivate::InternalSwap(GameSessionActivate* other) {
  gamesessionid_.Swap(&other->gamesessionid_);
  std::swap(maxplayers_, other->maxplayers_);
  std::swap(port_, other->port_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameSessionActivate::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameSessionActivate

// string gameSessionId = 1;
void GameSessionActivate::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GameSessionActivate::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
  return gamesessionid_.GetNoArena();
}
void GameSessionActivate::set_gamesessionid(const ::std::string& value) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
}
#if LANG_CXX11
void GameSessionActivate::set_gamesessionid(::std::string&& value) {
  
  gamesessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
}
#endif
void GameSessionActivate::set_gamesessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
}
void GameSessionActivate::set_gamesessionid(const char* value, size_t size) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
}
::std::string* GameSessionActivate::mutable_gamesessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameSessionActivate::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
  
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameSessionActivate::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    
  } else {
    
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
}

// int32 maxPlayers = 2;
void GameSessionActivate::clear_maxplayers() {
  maxplayers_ = 0;
}
::google::protobuf::int32 GameSessionActivate::maxplayers() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.maxPlayers)
  return maxplayers_;
}
void GameSessionActivate::set_maxplayers(::google::protobuf::int32 value) {
  
  maxplayers_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.maxPlayers)
}

// int32 port = 3;
void GameSessionActivate::clear_port() {
  port_ = 0;
}
::google::protobuf::int32 GameSessionActivate::port() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.port)
  return port_;
}
void GameSessionActivate::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameSessionTerminate::kGameSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSessionTerminate::GameSessionTerminate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
}
GameSessionTerminate::GameSessionTerminate(const GameSessionTerminate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamesessionid().size() > 0) {
    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
}

void GameSessionTerminate::SharedCtor() {
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GameSessionTerminate::~GameSessionTerminate() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  SharedDtor();
}

void GameSessionTerminate::SharedDtor() {
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameSessionTerminate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSessionTerminate::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameSessionTerminate& GameSessionTerminate::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameSessionTerminate* GameSessionTerminate::New(::google::protobuf::Arena* arena) const {
  GameSessionTerminate* n = new GameSessionTerminate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameSessionTerminate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GameSessionTerminate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gameSessionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamesessionid().data(), this->gamesessionid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  return false;
#undef DO_
}

void GameSessionTerminate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamesessionid(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
}

::google::protobuf::uint8* GameSessionTerminate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesessionid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  return target;
}

size_t GameSessionTerminate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  size_t total_size = 0;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessionid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameSessionTerminate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSessionTerminate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameSessionTerminate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
    MergeFrom(*source);
  }
}

void GameSessionTerminate::MergeFrom(const GameSessionTerminate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gamesessionid().size() > 0) {

    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
}

void GameSessionTerminate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSessionTerminate::CopyFrom(const GameSessionTerminate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSessionTerminate::IsInitialized() const {
  return true;
}

void GameSessionTerminate::Swap(GameSessionTerminate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSessionTerminate::InternalSwap(GameSessionTerminate* other) {
  gamesessionid_.Swap(&other->gamesessionid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameSessionTerminate::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameSessionTerminate

// string gameSessionId = 1;
void GameSessionTerminate::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GameSessionTerminate::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
  return gamesessionid_.GetNoArena();
}
void GameSessionTerminate::set_gamesessionid(const ::std::string& value) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
}
#if LANG_CXX11
void GameSessionTerminate::set_gamesessionid(::std::string&& value) {
  
  gamesessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
}
#endif
void GameSessionTerminate::set_gamesessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
}
void GameSessionTerminate::set_gamesessionid(const char* value, size_t size) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
}
::std::string* GameSessionTerminate::mutable_gamesessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameSessionTerminate::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
  
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameSessionTerminate::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    
  } else {
    
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdatePlayerSessionCreationPolicy::kGameSessionIdFieldNumber;
const int UpdatePlayerSessionCreationPolicy::kNewPlayerSessionCreationPolicyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdatePlayerSessionCreationPolicy::UpdatePlayerSessionCreationPolicy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
}
UpdatePlayerSessionCreationPolicy::UpdatePlayerSessionCreationPolicy(const UpdatePlayerSessionCreationPolicy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamesessionid().size() > 0) {
    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  newplayersessioncreationpolicy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.newplayersessioncreationpolicy().size() > 0) {
    newplayersessioncreationpolicy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newplayersessioncreationpolicy_);
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
}

void UpdatePlayerSessionCreationPolicy::SharedCtor() {
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newplayersessioncreationpolicy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UpdatePlayerSessionCreationPolicy::~UpdatePlayerSessionCreationPolicy() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  SharedDtor();
}

void UpdatePlayerSessionCreationPolicy::SharedDtor() {
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newplayersessioncreationpolicy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpdatePlayerSessionCreationPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatePlayerSessionCreationPolicy::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdatePlayerSessionCreationPolicy& UpdatePlayerSessionCreationPolicy::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdatePlayerSessionCreationPolicy* UpdatePlayerSessionCreationPolicy::New(::google::protobuf::Arena* arena) const {
  UpdatePlayerSessionCreationPolicy* n = new UpdatePlayerSessionCreationPolicy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdatePlayerSessionCreationPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  newplayersessioncreationpolicy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UpdatePlayerSessionCreationPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gameSessionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamesessionid().data(), this->gamesessionid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string newPlayerSessionCreationPolicy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newplayersessioncreationpolicy()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->newplayersessioncreationpolicy().data(), this->newplayersessioncreationpolicy().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  return false;
#undef DO_
}

void UpdatePlayerSessionCreationPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamesessionid(), output);
  }

  // string newPlayerSessionCreationPolicy = 2;
  if (this->newplayersessioncreationpolicy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->newplayersessioncreationpolicy().data(), this->newplayersessioncreationpolicy().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->newplayersessioncreationpolicy(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
}

::google::protobuf::uint8* UpdatePlayerSessionCreationPolicy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesessionid(), target);
  }

  // string newPlayerSessionCreationPolicy = 2;
  if (this->newplayersessioncreationpolicy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->newplayersessioncreationpolicy().data(), this->newplayersessioncreationpolicy().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->newplayersessioncreationpolicy(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  return target;
}

size_t UpdatePlayerSessionCreationPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  size_t total_size = 0;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessionid());
  }

  // string newPlayerSessionCreationPolicy = 2;
  if (this->newplayersessioncreationpolicy().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->newplayersessioncreationpolicy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatePlayerSessionCreationPolicy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePlayerSessionCreationPolicy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdatePlayerSessionCreationPolicy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
    MergeFrom(*source);
  }
}

void UpdatePlayerSessionCreationPolicy::MergeFrom(const UpdatePlayerSessionCreationPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gamesessionid().size() > 0) {

    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  if (from.newplayersessioncreationpolicy().size() > 0) {

    newplayersessioncreationpolicy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.newplayersessioncreationpolicy_);
  }
}

void UpdatePlayerSessionCreationPolicy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePlayerSessionCreationPolicy::CopyFrom(const UpdatePlayerSessionCreationPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePlayerSessionCreationPolicy::IsInitialized() const {
  return true;
}

void UpdatePlayerSessionCreationPolicy::Swap(UpdatePlayerSessionCreationPolicy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdatePlayerSessionCreationPolicy::InternalSwap(UpdatePlayerSessionCreationPolicy* other) {
  gamesessionid_.Swap(&other->gamesessionid_);
  newplayersessioncreationpolicy_.Swap(&other->newplayersessioncreationpolicy_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdatePlayerSessionCreationPolicy::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdatePlayerSessionCreationPolicy

// string gameSessionId = 1;
void UpdatePlayerSessionCreationPolicy::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdatePlayerSessionCreationPolicy::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
  return gamesessionid_.GetNoArena();
}
void UpdatePlayerSessionCreationPolicy::set_gamesessionid(const ::std::string& value) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
}
#if LANG_CXX11
void UpdatePlayerSessionCreationPolicy::set_gamesessionid(::std::string&& value) {
  
  gamesessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
}
#endif
void UpdatePlayerSessionCreationPolicy::set_gamesessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
}
void UpdatePlayerSessionCreationPolicy::set_gamesessionid(const char* value, size_t size) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
}
::std::string* UpdatePlayerSessionCreationPolicy::mutable_gamesessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdatePlayerSessionCreationPolicy::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
  
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdatePlayerSessionCreationPolicy::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    
  } else {
    
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
}

// string newPlayerSessionCreationPolicy = 2;
void UpdatePlayerSessionCreationPolicy::clear_newplayersessioncreationpolicy() {
  newplayersessioncreationpolicy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdatePlayerSessionCreationPolicy::newplayersessioncreationpolicy() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
  return newplayersessioncreationpolicy_.GetNoArena();
}
void UpdatePlayerSessionCreationPolicy::set_newplayersessioncreationpolicy(const ::std::string& value) {
  
  newplayersessioncreationpolicy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
}
#if LANG_CXX11
void UpdatePlayerSessionCreationPolicy::set_newplayersessioncreationpolicy(::std::string&& value) {
  
  newplayersessioncreationpolicy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
}
#endif
void UpdatePlayerSessionCreationPolicy::set_newplayersessioncreationpolicy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  newplayersessioncreationpolicy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
}
void UpdatePlayerSessionCreationPolicy::set_newplayersessioncreationpolicy(const char* value, size_t size) {
  
  newplayersessioncreationpolicy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
}
::std::string* UpdatePlayerSessionCreationPolicy::mutable_newplayersessioncreationpolicy() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
  return newplayersessioncreationpolicy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdatePlayerSessionCreationPolicy::release_newplayersessioncreationpolicy() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
  
  return newplayersessioncreationpolicy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdatePlayerSessionCreationPolicy::set_allocated_newplayersessioncreationpolicy(::std::string* newplayersessioncreationpolicy) {
  if (newplayersessioncreationpolicy != NULL) {
    
  } else {
    
  }
  newplayersessioncreationpolicy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), newplayersessioncreationpolicy);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcceptPlayerSession::kGameSessionIdFieldNumber;
const int AcceptPlayerSession::kPlayerSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcceptPlayerSession::AcceptPlayerSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
}
AcceptPlayerSession::AcceptPlayerSession(const AcceptPlayerSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamesessionid().size() > 0) {
    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  playersessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playersessionid().size() > 0) {
    playersessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
}

void AcceptPlayerSession::SharedCtor() {
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AcceptPlayerSession::~AcceptPlayerSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  SharedDtor();
}

void AcceptPlayerSession::SharedDtor() {
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AcceptPlayerSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptPlayerSession::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcceptPlayerSession& AcceptPlayerSession::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

AcceptPlayerSession* AcceptPlayerSession::New(::google::protobuf::Arena* arena) const {
  AcceptPlayerSession* n = new AcceptPlayerSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcceptPlayerSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AcceptPlayerSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gameSessionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamesessionid().data(), this->gamesessionid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string playerSessionId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playersessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playersessionid().data(), this->playersessionid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  return false;
#undef DO_
}

void AcceptPlayerSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamesessionid(), output);
  }

  // string playerSessionId = 2;
  if (this->playersessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playersessionid().data(), this->playersessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playersessionid(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
}

::google::protobuf::uint8* AcceptPlayerSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesessionid(), target);
  }

  // string playerSessionId = 2;
  if (this->playersessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playersessionid().data(), this->playersessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playersessionid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  return target;
}

size_t AcceptPlayerSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  size_t total_size = 0;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessionid());
  }

  // string playerSessionId = 2;
  if (this->playersessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playersessionid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptPlayerSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptPlayerSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcceptPlayerSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
    MergeFrom(*source);
  }
}

void AcceptPlayerSession::MergeFrom(const AcceptPlayerSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gamesessionid().size() > 0) {

    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  if (from.playersessionid().size() > 0) {

    playersessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
}

void AcceptPlayerSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptPlayerSession::CopyFrom(const AcceptPlayerSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptPlayerSession::IsInitialized() const {
  return true;
}

void AcceptPlayerSession::Swap(AcceptPlayerSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcceptPlayerSession::InternalSwap(AcceptPlayerSession* other) {
  gamesessionid_.Swap(&other->gamesessionid_);
  playersessionid_.Swap(&other->playersessionid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcceptPlayerSession::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AcceptPlayerSession

// string gameSessionId = 1;
void AcceptPlayerSession::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AcceptPlayerSession::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
  return gamesessionid_.GetNoArena();
}
void AcceptPlayerSession::set_gamesessionid(const ::std::string& value) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
}
#if LANG_CXX11
void AcceptPlayerSession::set_gamesessionid(::std::string&& value) {
  
  gamesessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
}
#endif
void AcceptPlayerSession::set_gamesessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
}
void AcceptPlayerSession::set_gamesessionid(const char* value, size_t size) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
}
::std::string* AcceptPlayerSession::mutable_gamesessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AcceptPlayerSession::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
  
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcceptPlayerSession::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    
  } else {
    
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
}

// string playerSessionId = 2;
void AcceptPlayerSession::clear_playersessionid() {
  playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AcceptPlayerSession::playersessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
  return playersessionid_.GetNoArena();
}
void AcceptPlayerSession::set_playersessionid(const ::std::string& value) {
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
}
#if LANG_CXX11
void AcceptPlayerSession::set_playersessionid(::std::string&& value) {
  
  playersessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
}
#endif
void AcceptPlayerSession::set_playersessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
}
void AcceptPlayerSession::set_playersessionid(const char* value, size_t size) {
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
}
::std::string* AcceptPlayerSession::mutable_playersessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
  return playersessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AcceptPlayerSession::release_playersessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
  
  return playersessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AcceptPlayerSession::set_allocated_playersessionid(::std::string* playersessionid) {
  if (playersessionid != NULL) {
    
  } else {
    
  }
  playersessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playersessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemovePlayerSession::kGameSessionIdFieldNumber;
const int RemovePlayerSession::kPlayerSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemovePlayerSession::RemovePlayerSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
}
RemovePlayerSession::RemovePlayerSession(const RemovePlayerSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamesessionid().size() > 0) {
    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  playersessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playersessionid().size() > 0) {
    playersessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
}

void RemovePlayerSession::SharedCtor() {
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RemovePlayerSession::~RemovePlayerSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  SharedDtor();
}

void RemovePlayerSession::SharedDtor() {
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RemovePlayerSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemovePlayerSession::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemovePlayerSession& RemovePlayerSession::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

RemovePlayerSession* RemovePlayerSession::New(::google::protobuf::Arena* arena) const {
  RemovePlayerSession* n = new RemovePlayerSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemovePlayerSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RemovePlayerSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gameSessionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamesessionid().data(), this->gamesessionid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string playerSessionId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playersessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playersessionid().data(), this->playersessionid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  return false;
#undef DO_
}

void RemovePlayerSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamesessionid(), output);
  }

  // string playerSessionId = 2;
  if (this->playersessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playersessionid().data(), this->playersessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playersessionid(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
}

::google::protobuf::uint8* RemovePlayerSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesessionid(), target);
  }

  // string playerSessionId = 2;
  if (this->playersessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playersessionid().data(), this->playersessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playersessionid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  return target;
}

size_t RemovePlayerSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  size_t total_size = 0;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessionid());
  }

  // string playerSessionId = 2;
  if (this->playersessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playersessionid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemovePlayerSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  GOOGLE_DCHECK_NE(&from, this);
  const RemovePlayerSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemovePlayerSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
    MergeFrom(*source);
  }
}

void RemovePlayerSession::MergeFrom(const RemovePlayerSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gamesessionid().size() > 0) {

    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  if (from.playersessionid().size() > 0) {

    playersessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
}

void RemovePlayerSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemovePlayerSession::CopyFrom(const RemovePlayerSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemovePlayerSession::IsInitialized() const {
  return true;
}

void RemovePlayerSession::Swap(RemovePlayerSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemovePlayerSession::InternalSwap(RemovePlayerSession* other) {
  gamesessionid_.Swap(&other->gamesessionid_);
  playersessionid_.Swap(&other->playersessionid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemovePlayerSession::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemovePlayerSession

// string gameSessionId = 1;
void RemovePlayerSession::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RemovePlayerSession::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
  return gamesessionid_.GetNoArena();
}
void RemovePlayerSession::set_gamesessionid(const ::std::string& value) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
}
#if LANG_CXX11
void RemovePlayerSession::set_gamesessionid(::std::string&& value) {
  
  gamesessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
}
#endif
void RemovePlayerSession::set_gamesessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
}
void RemovePlayerSession::set_gamesessionid(const char* value, size_t size) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
}
::std::string* RemovePlayerSession::mutable_gamesessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemovePlayerSession::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
  
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemovePlayerSession::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    
  } else {
    
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
}

// string playerSessionId = 2;
void RemovePlayerSession::clear_playersessionid() {
  playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RemovePlayerSession::playersessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
  return playersessionid_.GetNoArena();
}
void RemovePlayerSession::set_playersessionid(const ::std::string& value) {
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
}
#if LANG_CXX11
void RemovePlayerSession::set_playersessionid(::std::string&& value) {
  
  playersessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
}
#endif
void RemovePlayerSession::set_playersessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
}
void RemovePlayerSession::set_playersessionid(const char* value, size_t size) {
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
}
::std::string* RemovePlayerSession::mutable_playersessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
  return playersessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemovePlayerSession::release_playersessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
  
  return playersessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemovePlayerSession::set_allocated_playersessionid(::std::string* playersessionid) {
  if (playersessionid != NULL) {
    
  } else {
    
  }
  playersessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playersessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportHealth::kHealthStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportHealth::ReportHealth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
}
ReportHealth::ReportHealth(const ReportHealth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  healthstatus_ = from.healthstatus_;
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
}

void ReportHealth::SharedCtor() {
  healthstatus_ = false;
  _cached_size_ = 0;
}

ReportHealth::~ReportHealth() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  SharedDtor();
}

void ReportHealth::SharedDtor() {
}

void ReportHealth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportHealth::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReportHealth& ReportHealth::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReportHealth* ReportHealth::New(::google::protobuf::Arena* arena) const {
  ReportHealth* n = new ReportHealth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportHealth::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  healthstatus_ = false;
}

bool ReportHealth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool healthStatus = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &healthstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  return false;
#undef DO_
}

void ReportHealth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool healthStatus = 1;
  if (this->healthstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->healthstatus(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
}

::google::protobuf::uint8* ReportHealth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool healthStatus = 1;
  if (this->healthstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->healthstatus(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  return target;
}

size_t ReportHealth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  size_t total_size = 0;

  // bool healthStatus = 1;
  if (this->healthstatus() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportHealth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportHealth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportHealth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
    MergeFrom(*source);
  }
}

void ReportHealth::MergeFrom(const ReportHealth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.healthstatus() != 0) {
    set_healthstatus(from.healthstatus());
  }
}

void ReportHealth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportHealth::CopyFrom(const ReportHealth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportHealth::IsInitialized() const {
  return true;
}

void ReportHealth::Swap(ReportHealth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportHealth::InternalSwap(ReportHealth* other) {
  std::swap(healthstatus_, other->healthstatus_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReportHealth::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportHealth

// bool healthStatus = 1;
void ReportHealth::clear_healthstatus() {
  healthstatus_ = false;
}
bool ReportHealth::healthstatus() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth.healthStatus)
  return healthstatus_;
}
void ReportHealth::set_healthstatus(bool value) {
  
  healthstatus_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth.healthStatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DescribePlayerSessionsRequest::kGameSessionIdFieldNumber;
const int DescribePlayerSessionsRequest::kPlayerIdFieldNumber;
const int DescribePlayerSessionsRequest::kPlayerSessionIdFieldNumber;
const int DescribePlayerSessionsRequest::kPlayerSessionStatusFilterFieldNumber;
const int DescribePlayerSessionsRequest::kNextTokenFieldNumber;
const int DescribePlayerSessionsRequest::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DescribePlayerSessionsRequest::DescribePlayerSessionsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
}
DescribePlayerSessionsRequest::DescribePlayerSessionsRequest(const DescribePlayerSessionsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamesessionid().size() > 0) {
    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playerid().size() > 0) {
    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  playersessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playersessionid().size() > 0) {
    playersessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
  playersessionstatusfilter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playersessionstatusfilter().size() > 0) {
    playersessionstatusfilter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionstatusfilter_);
  }
  nexttoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nexttoken().size() > 0) {
    nexttoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nexttoken_);
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
}

void DescribePlayerSessionsRequest::SharedCtor() {
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionstatusfilter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nexttoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
  _cached_size_ = 0;
}

DescribePlayerSessionsRequest::~DescribePlayerSessionsRequest() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  SharedDtor();
}

void DescribePlayerSessionsRequest::SharedDtor() {
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionstatusfilter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nexttoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DescribePlayerSessionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DescribePlayerSessionsRequest::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DescribePlayerSessionsRequest& DescribePlayerSessionsRequest::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

DescribePlayerSessionsRequest* DescribePlayerSessionsRequest::New(::google::protobuf::Arena* arena) const {
  DescribePlayerSessionsRequest* n = new DescribePlayerSessionsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DescribePlayerSessionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playersessionstatusfilter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nexttoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
}

bool DescribePlayerSessionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gameSessionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamesessionid().data(), this->gamesessionid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string playerSessionId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playersessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playersessionid().data(), this->playersessionid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string playerSessionStatusFilter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playersessionstatusfilter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playersessionstatusfilter().data(), this->playersessionstatusfilter().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nextToken = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nexttoken()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nexttoken().data(), this->nexttoken().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 limit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  return false;
#undef DO_
}

void DescribePlayerSessionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamesessionid(), output);
  }

  // string playerId = 2;
  if (this->playerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playerid(), output);
  }

  // string playerSessionId = 3;
  if (this->playersessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playersessionid().data(), this->playersessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->playersessionid(), output);
  }

  // string playerSessionStatusFilter = 4;
  if (this->playersessionstatusfilter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playersessionstatusfilter().data(), this->playersessionstatusfilter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->playersessionstatusfilter(), output);
  }

  // string nextToken = 5;
  if (this->nexttoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nexttoken().data(), this->nexttoken().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->nexttoken(), output);
  }

  // int32 limit = 6;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->limit(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
}

::google::protobuf::uint8* DescribePlayerSessionsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesessionid(), target);
  }

  // string playerId = 2;
  if (this->playerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playerid(), target);
  }

  // string playerSessionId = 3;
  if (this->playersessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playersessionid().data(), this->playersessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->playersessionid(), target);
  }

  // string playerSessionStatusFilter = 4;
  if (this->playersessionstatusfilter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playersessionstatusfilter().data(), this->playersessionstatusfilter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->playersessionstatusfilter(), target);
  }

  // string nextToken = 5;
  if (this->nexttoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nexttoken().data(), this->nexttoken().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nexttoken(), target);
  }

  // int32 limit = 6;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->limit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  return target;
}

size_t DescribePlayerSessionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  size_t total_size = 0;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessionid());
  }

  // string playerId = 2;
  if (this->playerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playerid());
  }

  // string playerSessionId = 3;
  if (this->playersessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playersessionid());
  }

  // string playerSessionStatusFilter = 4;
  if (this->playersessionstatusfilter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playersessionstatusfilter());
  }

  // string nextToken = 5;
  if (this->nexttoken().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nexttoken());
  }

  // int32 limit = 6;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DescribePlayerSessionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribePlayerSessionsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DescribePlayerSessionsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
    MergeFrom(*source);
  }
}

void DescribePlayerSessionsRequest::MergeFrom(const DescribePlayerSessionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gamesessionid().size() > 0) {

    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  if (from.playerid().size() > 0) {

    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  if (from.playersessionid().size() > 0) {

    playersessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
  if (from.playersessionstatusfilter().size() > 0) {

    playersessionstatusfilter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionstatusfilter_);
  }
  if (from.nexttoken().size() > 0) {

    nexttoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nexttoken_);
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void DescribePlayerSessionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribePlayerSessionsRequest::CopyFrom(const DescribePlayerSessionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribePlayerSessionsRequest::IsInitialized() const {
  return true;
}

void DescribePlayerSessionsRequest::Swap(DescribePlayerSessionsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DescribePlayerSessionsRequest::InternalSwap(DescribePlayerSessionsRequest* other) {
  gamesessionid_.Swap(&other->gamesessionid_);
  playerid_.Swap(&other->playerid_);
  playersessionid_.Swap(&other->playersessionid_);
  playersessionstatusfilter_.Swap(&other->playersessionstatusfilter_);
  nexttoken_.Swap(&other->nexttoken_);
  std::swap(limit_, other->limit_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DescribePlayerSessionsRequest::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DescribePlayerSessionsRequest

// string gameSessionId = 1;
void DescribePlayerSessionsRequest::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DescribePlayerSessionsRequest::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
  return gamesessionid_.GetNoArena();
}
void DescribePlayerSessionsRequest::set_gamesessionid(const ::std::string& value) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
}
#if LANG_CXX11
void DescribePlayerSessionsRequest::set_gamesessionid(::std::string&& value) {
  
  gamesessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
}
#endif
void DescribePlayerSessionsRequest::set_gamesessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
}
void DescribePlayerSessionsRequest::set_gamesessionid(const char* value, size_t size) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
}
::std::string* DescribePlayerSessionsRequest::mutable_gamesessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DescribePlayerSessionsRequest::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
  
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DescribePlayerSessionsRequest::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    
  } else {
    
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
}

// string playerId = 2;
void DescribePlayerSessionsRequest::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DescribePlayerSessionsRequest::playerid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
  return playerid_.GetNoArena();
}
void DescribePlayerSessionsRequest::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
}
#if LANG_CXX11
void DescribePlayerSessionsRequest::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
}
#endif
void DescribePlayerSessionsRequest::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
}
void DescribePlayerSessionsRequest::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
}
::std::string* DescribePlayerSessionsRequest::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DescribePlayerSessionsRequest::release_playerid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DescribePlayerSessionsRequest::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
}

// string playerSessionId = 3;
void DescribePlayerSessionsRequest::clear_playersessionid() {
  playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DescribePlayerSessionsRequest::playersessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
  return playersessionid_.GetNoArena();
}
void DescribePlayerSessionsRequest::set_playersessionid(const ::std::string& value) {
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
}
#if LANG_CXX11
void DescribePlayerSessionsRequest::set_playersessionid(::std::string&& value) {
  
  playersessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
}
#endif
void DescribePlayerSessionsRequest::set_playersessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
}
void DescribePlayerSessionsRequest::set_playersessionid(const char* value, size_t size) {
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
}
::std::string* DescribePlayerSessionsRequest::mutable_playersessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
  return playersessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DescribePlayerSessionsRequest::release_playersessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
  
  return playersessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DescribePlayerSessionsRequest::set_allocated_playersessionid(::std::string* playersessionid) {
  if (playersessionid != NULL) {
    
  } else {
    
  }
  playersessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playersessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
}

// string playerSessionStatusFilter = 4;
void DescribePlayerSessionsRequest::clear_playersessionstatusfilter() {
  playersessionstatusfilter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DescribePlayerSessionsRequest::playersessionstatusfilter() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
  return playersessionstatusfilter_.GetNoArena();
}
void DescribePlayerSessionsRequest::set_playersessionstatusfilter(const ::std::string& value) {
  
  playersessionstatusfilter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
}
#if LANG_CXX11
void DescribePlayerSessionsRequest::set_playersessionstatusfilter(::std::string&& value) {
  
  playersessionstatusfilter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
}
#endif
void DescribePlayerSessionsRequest::set_playersessionstatusfilter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playersessionstatusfilter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
}
void DescribePlayerSessionsRequest::set_playersessionstatusfilter(const char* value, size_t size) {
  
  playersessionstatusfilter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
}
::std::string* DescribePlayerSessionsRequest::mutable_playersessionstatusfilter() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
  return playersessionstatusfilter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DescribePlayerSessionsRequest::release_playersessionstatusfilter() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
  
  return playersessionstatusfilter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DescribePlayerSessionsRequest::set_allocated_playersessionstatusfilter(::std::string* playersessionstatusfilter) {
  if (playersessionstatusfilter != NULL) {
    
  } else {
    
  }
  playersessionstatusfilter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playersessionstatusfilter);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
}

// string nextToken = 5;
void DescribePlayerSessionsRequest::clear_nexttoken() {
  nexttoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DescribePlayerSessionsRequest::nexttoken() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
  return nexttoken_.GetNoArena();
}
void DescribePlayerSessionsRequest::set_nexttoken(const ::std::string& value) {
  
  nexttoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
}
#if LANG_CXX11
void DescribePlayerSessionsRequest::set_nexttoken(::std::string&& value) {
  
  nexttoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
}
#endif
void DescribePlayerSessionsRequest::set_nexttoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nexttoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
}
void DescribePlayerSessionsRequest::set_nexttoken(const char* value, size_t size) {
  
  nexttoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
}
::std::string* DescribePlayerSessionsRequest::mutable_nexttoken() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
  return nexttoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DescribePlayerSessionsRequest::release_nexttoken() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
  
  return nexttoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DescribePlayerSessionsRequest::set_allocated_nexttoken(::std::string* nexttoken) {
  if (nexttoken != NULL) {
    
  } else {
    
  }
  nexttoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nexttoken);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
}

// int32 limit = 6;
void DescribePlayerSessionsRequest::clear_limit() {
  limit_ = 0;
}
::google::protobuf::int32 DescribePlayerSessionsRequest::limit() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.limit)
  return limit_;
}
void DescribePlayerSessionsRequest::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackfillMatchmakingRequest::kTicketIdFieldNumber;
const int BackfillMatchmakingRequest::kGameSessionArnFieldNumber;
const int BackfillMatchmakingRequest::kMatchmakingConfigurationArnFieldNumber;
const int BackfillMatchmakingRequest::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackfillMatchmakingRequest::BackfillMatchmakingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
}
BackfillMatchmakingRequest::BackfillMatchmakingRequest(const BackfillMatchmakingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      players_(from.players_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ticketid().size() > 0) {
    ticketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticketid_);
  }
  gamesessionarn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamesessionarn().size() > 0) {
    gamesessionarn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionarn_);
  }
  matchmakingconfigurationarn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.matchmakingconfigurationarn().size() > 0) {
    matchmakingconfigurationarn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matchmakingconfigurationarn_);
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
}

void BackfillMatchmakingRequest::SharedCtor() {
  ticketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessionarn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matchmakingconfigurationarn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BackfillMatchmakingRequest::~BackfillMatchmakingRequest() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  SharedDtor();
}

void BackfillMatchmakingRequest::SharedDtor() {
  ticketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessionarn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matchmakingconfigurationarn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BackfillMatchmakingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackfillMatchmakingRequest::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackfillMatchmakingRequest& BackfillMatchmakingRequest::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackfillMatchmakingRequest* BackfillMatchmakingRequest::New(::google::protobuf::Arena* arena) const {
  BackfillMatchmakingRequest* n = new BackfillMatchmakingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackfillMatchmakingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  players_.Clear();
  ticketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessionarn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matchmakingconfigurationarn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BackfillMatchmakingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ticketId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticketid().data(), this->ticketid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gameSessionArn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionarn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamesessionarn().data(), this->gamesessionarn().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string matchmakingConfigurationArn = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matchmakingconfigurationarn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->matchmakingconfigurationarn().data(), this->matchmakingconfigurationarn().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.amazon.whitewater.auxproxy.pbuffer.Player players = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  return false;
#undef DO_
}

void BackfillMatchmakingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticketId = 1;
  if (this->ticketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticketid().data(), this->ticketid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ticketid(), output);
  }

  // string gameSessionArn = 2;
  if (this->gamesessionarn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionarn().data(), this->gamesessionarn().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gamesessionarn(), output);
  }

  // string matchmakingConfigurationArn = 3;
  if (this->matchmakingconfigurationarn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matchmakingconfigurationarn().data(), this->matchmakingconfigurationarn().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->matchmakingconfigurationarn(), output);
  }

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.Player players = 4;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->players(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
}

::google::protobuf::uint8* BackfillMatchmakingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticketId = 1;
  if (this->ticketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticketid().data(), this->ticketid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ticketid(), target);
  }

  // string gameSessionArn = 2;
  if (this->gamesessionarn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionarn().data(), this->gamesessionarn().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gamesessionarn(), target);
  }

  // string matchmakingConfigurationArn = 3;
  if (this->matchmakingconfigurationarn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matchmakingconfigurationarn().data(), this->matchmakingconfigurationarn().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->matchmakingconfigurationarn(), target);
  }

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.Player players = 4;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->players(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  return target;
}

size_t BackfillMatchmakingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  size_t total_size = 0;

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.Player players = 4;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  // string ticketId = 1;
  if (this->ticketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticketid());
  }

  // string gameSessionArn = 2;
  if (this->gamesessionarn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessionarn());
  }

  // string matchmakingConfigurationArn = 3;
  if (this->matchmakingconfigurationarn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->matchmakingconfigurationarn());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackfillMatchmakingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BackfillMatchmakingRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackfillMatchmakingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
    MergeFrom(*source);
  }
}

void BackfillMatchmakingRequest::MergeFrom(const BackfillMatchmakingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.ticketid().size() > 0) {

    ticketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticketid_);
  }
  if (from.gamesessionarn().size() > 0) {

    gamesessionarn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionarn_);
  }
  if (from.matchmakingconfigurationarn().size() > 0) {

    matchmakingconfigurationarn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matchmakingconfigurationarn_);
  }
}

void BackfillMatchmakingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackfillMatchmakingRequest::CopyFrom(const BackfillMatchmakingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackfillMatchmakingRequest::IsInitialized() const {
  return true;
}

void BackfillMatchmakingRequest::Swap(BackfillMatchmakingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackfillMatchmakingRequest::InternalSwap(BackfillMatchmakingRequest* other) {
  players_.InternalSwap(&other->players_);
  ticketid_.Swap(&other->ticketid_);
  gamesessionarn_.Swap(&other->gamesessionarn_);
  matchmakingconfigurationarn_.Swap(&other->matchmakingconfigurationarn_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackfillMatchmakingRequest::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackfillMatchmakingRequest

// string ticketId = 1;
void BackfillMatchmakingRequest::clear_ticketid() {
  ticketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BackfillMatchmakingRequest::ticketid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId)
  return ticketid_.GetNoArena();
}
void BackfillMatchmakingRequest::set_ticketid(const ::std::string& value) {
  
  ticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId)
}
#if LANG_CXX11
void BackfillMatchmakingRequest::set_ticketid(::std::string&& value) {
  
  ticketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId)
}
#endif
void BackfillMatchmakingRequest::set_ticketid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId)
}
void BackfillMatchmakingRequest::set_ticketid(const char* value, size_t size) {
  
  ticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId)
}
::std::string* BackfillMatchmakingRequest::mutable_ticketid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId)
  return ticketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackfillMatchmakingRequest::release_ticketid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId)
  
  return ticketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackfillMatchmakingRequest::set_allocated_ticketid(::std::string* ticketid) {
  if (ticketid != NULL) {
    
  } else {
    
  }
  ticketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticketid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId)
}

// string gameSessionArn = 2;
void BackfillMatchmakingRequest::clear_gamesessionarn() {
  gamesessionarn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BackfillMatchmakingRequest::gamesessionarn() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn)
  return gamesessionarn_.GetNoArena();
}
void BackfillMatchmakingRequest::set_gamesessionarn(const ::std::string& value) {
  
  gamesessionarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn)
}
#if LANG_CXX11
void BackfillMatchmakingRequest::set_gamesessionarn(::std::string&& value) {
  
  gamesessionarn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn)
}
#endif
void BackfillMatchmakingRequest::set_gamesessionarn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gamesessionarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn)
}
void BackfillMatchmakingRequest::set_gamesessionarn(const char* value, size_t size) {
  
  gamesessionarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn)
}
::std::string* BackfillMatchmakingRequest::mutable_gamesessionarn() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn)
  return gamesessionarn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackfillMatchmakingRequest::release_gamesessionarn() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn)
  
  return gamesessionarn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackfillMatchmakingRequest::set_allocated_gamesessionarn(::std::string* gamesessionarn) {
  if (gamesessionarn != NULL) {
    
  } else {
    
  }
  gamesessionarn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionarn);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn)
}

// string matchmakingConfigurationArn = 3;
void BackfillMatchmakingRequest::clear_matchmakingconfigurationarn() {
  matchmakingconfigurationarn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BackfillMatchmakingRequest::matchmakingconfigurationarn() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn)
  return matchmakingconfigurationarn_.GetNoArena();
}
void BackfillMatchmakingRequest::set_matchmakingconfigurationarn(const ::std::string& value) {
  
  matchmakingconfigurationarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn)
}
#if LANG_CXX11
void BackfillMatchmakingRequest::set_matchmakingconfigurationarn(::std::string&& value) {
  
  matchmakingconfigurationarn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn)
}
#endif
void BackfillMatchmakingRequest::set_matchmakingconfigurationarn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  matchmakingconfigurationarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn)
}
void BackfillMatchmakingRequest::set_matchmakingconfigurationarn(const char* value, size_t size) {
  
  matchmakingconfigurationarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn)
}
::std::string* BackfillMatchmakingRequest::mutable_matchmakingconfigurationarn() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn)
  return matchmakingconfigurationarn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackfillMatchmakingRequest::release_matchmakingconfigurationarn() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn)
  
  return matchmakingconfigurationarn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackfillMatchmakingRequest::set_allocated_matchmakingconfigurationarn(::std::string* matchmakingconfigurationarn) {
  if (matchmakingconfigurationarn != NULL) {
    
  } else {
    
  }
  matchmakingconfigurationarn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), matchmakingconfigurationarn);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn)
}

// repeated .com.amazon.whitewater.auxproxy.pbuffer.Player players = 4;
int BackfillMatchmakingRequest::players_size() const {
  return players_.size();
}
void BackfillMatchmakingRequest::clear_players() {
  players_.Clear();
}
const ::com::amazon::whitewater::auxproxy::pbuffer::Player& BackfillMatchmakingRequest::players(int index) const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.players)
  return players_.Get(index);
}
::com::amazon::whitewater::auxproxy::pbuffer::Player* BackfillMatchmakingRequest::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.players)
  return players_.Mutable(index);
}
::com::amazon::whitewater::auxproxy::pbuffer::Player* BackfillMatchmakingRequest::add_players() {
  // @@protoc_insertion_point(field_add:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::Player >*
BackfillMatchmakingRequest::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::Player >&
BackfillMatchmakingRequest::players() const {
  // @@protoc_insertion_point(field_list:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.players)
  return players_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopMatchmakingRequest::kTicketIdFieldNumber;
const int StopMatchmakingRequest::kGameSessionArnFieldNumber;
const int StopMatchmakingRequest::kMatchmakingConfigurationArnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopMatchmakingRequest::StopMatchmakingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
}
StopMatchmakingRequest::StopMatchmakingRequest(const StopMatchmakingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ticketid().size() > 0) {
    ticketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticketid_);
  }
  gamesessionarn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamesessionarn().size() > 0) {
    gamesessionarn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionarn_);
  }
  matchmakingconfigurationarn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.matchmakingconfigurationarn().size() > 0) {
    matchmakingconfigurationarn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matchmakingconfigurationarn_);
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
}

void StopMatchmakingRequest::SharedCtor() {
  ticketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessionarn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matchmakingconfigurationarn_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

StopMatchmakingRequest::~StopMatchmakingRequest() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  SharedDtor();
}

void StopMatchmakingRequest::SharedDtor() {
  ticketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessionarn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matchmakingconfigurationarn_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StopMatchmakingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopMatchmakingRequest::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StopMatchmakingRequest& StopMatchmakingRequest::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

StopMatchmakingRequest* StopMatchmakingRequest::New(::google::protobuf::Arena* arena) const {
  StopMatchmakingRequest* n = new StopMatchmakingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopMatchmakingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  ticketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessionarn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matchmakingconfigurationarn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StopMatchmakingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ticketId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticketid().data(), this->ticketid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gameSessionArn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionarn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamesessionarn().data(), this->gamesessionarn().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string matchmakingConfigurationArn = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matchmakingconfigurationarn()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->matchmakingconfigurationarn().data(), this->matchmakingconfigurationarn().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  return false;
#undef DO_
}

void StopMatchmakingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticketId = 1;
  if (this->ticketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticketid().data(), this->ticketid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ticketid(), output);
  }

  // string gameSessionArn = 2;
  if (this->gamesessionarn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionarn().data(), this->gamesessionarn().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->gamesessionarn(), output);
  }

  // string matchmakingConfigurationArn = 3;
  if (this->matchmakingconfigurationarn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matchmakingconfigurationarn().data(), this->matchmakingconfigurationarn().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->matchmakingconfigurationarn(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
}

::google::protobuf::uint8* StopMatchmakingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticketId = 1;
  if (this->ticketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticketid().data(), this->ticketid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ticketid(), target);
  }

  // string gameSessionArn = 2;
  if (this->gamesessionarn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionarn().data(), this->gamesessionarn().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gamesessionarn(), target);
  }

  // string matchmakingConfigurationArn = 3;
  if (this->matchmakingconfigurationarn().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matchmakingconfigurationarn().data(), this->matchmakingconfigurationarn().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->matchmakingconfigurationarn(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  return target;
}

size_t StopMatchmakingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  size_t total_size = 0;

  // string ticketId = 1;
  if (this->ticketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticketid());
  }

  // string gameSessionArn = 2;
  if (this->gamesessionarn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessionarn());
  }

  // string matchmakingConfigurationArn = 3;
  if (this->matchmakingconfigurationarn().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->matchmakingconfigurationarn());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopMatchmakingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopMatchmakingRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopMatchmakingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
    MergeFrom(*source);
  }
}

void StopMatchmakingRequest::MergeFrom(const StopMatchmakingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ticketid().size() > 0) {

    ticketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticketid_);
  }
  if (from.gamesessionarn().size() > 0) {

    gamesessionarn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionarn_);
  }
  if (from.matchmakingconfigurationarn().size() > 0) {

    matchmakingconfigurationarn_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matchmakingconfigurationarn_);
  }
}

void StopMatchmakingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopMatchmakingRequest::CopyFrom(const StopMatchmakingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopMatchmakingRequest::IsInitialized() const {
  return true;
}

void StopMatchmakingRequest::Swap(StopMatchmakingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopMatchmakingRequest::InternalSwap(StopMatchmakingRequest* other) {
  ticketid_.Swap(&other->ticketid_);
  gamesessionarn_.Swap(&other->gamesessionarn_);
  matchmakingconfigurationarn_.Swap(&other->matchmakingconfigurationarn_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopMatchmakingRequest::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopMatchmakingRequest

// string ticketId = 1;
void StopMatchmakingRequest::clear_ticketid() {
  ticketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StopMatchmakingRequest::ticketid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId)
  return ticketid_.GetNoArena();
}
void StopMatchmakingRequest::set_ticketid(const ::std::string& value) {
  
  ticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId)
}
#if LANG_CXX11
void StopMatchmakingRequest::set_ticketid(::std::string&& value) {
  
  ticketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId)
}
#endif
void StopMatchmakingRequest::set_ticketid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId)
}
void StopMatchmakingRequest::set_ticketid(const char* value, size_t size) {
  
  ticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId)
}
::std::string* StopMatchmakingRequest::mutable_ticketid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId)
  return ticketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StopMatchmakingRequest::release_ticketid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId)
  
  return ticketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StopMatchmakingRequest::set_allocated_ticketid(::std::string* ticketid) {
  if (ticketid != NULL) {
    
  } else {
    
  }
  ticketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticketid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId)
}

// string gameSessionArn = 2;
void StopMatchmakingRequest::clear_gamesessionarn() {
  gamesessionarn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StopMatchmakingRequest::gamesessionarn() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn)
  return gamesessionarn_.GetNoArena();
}
void StopMatchmakingRequest::set_gamesessionarn(const ::std::string& value) {
  
  gamesessionarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn)
}
#if LANG_CXX11
void StopMatchmakingRequest::set_gamesessionarn(::std::string&& value) {
  
  gamesessionarn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn)
}
#endif
void StopMatchmakingRequest::set_gamesessionarn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gamesessionarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn)
}
void StopMatchmakingRequest::set_gamesessionarn(const char* value, size_t size) {
  
  gamesessionarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn)
}
::std::string* StopMatchmakingRequest::mutable_gamesessionarn() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn)
  return gamesessionarn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StopMatchmakingRequest::release_gamesessionarn() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn)
  
  return gamesessionarn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StopMatchmakingRequest::set_allocated_gamesessionarn(::std::string* gamesessionarn) {
  if (gamesessionarn != NULL) {
    
  } else {
    
  }
  gamesessionarn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionarn);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn)
}

// string matchmakingConfigurationArn = 3;
void StopMatchmakingRequest::clear_matchmakingconfigurationarn() {
  matchmakingconfigurationarn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StopMatchmakingRequest::matchmakingconfigurationarn() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn)
  return matchmakingconfigurationarn_.GetNoArena();
}
void StopMatchmakingRequest::set_matchmakingconfigurationarn(const ::std::string& value) {
  
  matchmakingconfigurationarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn)
}
#if LANG_CXX11
void StopMatchmakingRequest::set_matchmakingconfigurationarn(::std::string&& value) {
  
  matchmakingconfigurationarn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn)
}
#endif
void StopMatchmakingRequest::set_matchmakingconfigurationarn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  matchmakingconfigurationarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn)
}
void StopMatchmakingRequest::set_matchmakingconfigurationarn(const char* value, size_t size) {
  
  matchmakingconfigurationarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn)
}
::std::string* StopMatchmakingRequest::mutable_matchmakingconfigurationarn() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn)
  return matchmakingconfigurationarn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StopMatchmakingRequest::release_matchmakingconfigurationarn() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn)
  
  return matchmakingconfigurationarn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StopMatchmakingRequest::set_allocated_matchmakingconfigurationarn(::std::string* matchmakingconfigurationarn) {
  if (matchmakingconfigurationarn != NULL) {
    
  } else {
    
  }
  matchmakingconfigurationarn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), matchmakingconfigurationarn);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInstanceCertificate::GetInstanceCertificate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
}
GetInstanceCertificate::GetInstanceCertificate(const GetInstanceCertificate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
}

void GetInstanceCertificate::SharedCtor() {
  _cached_size_ = 0;
}

GetInstanceCertificate::~GetInstanceCertificate() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  SharedDtor();
}

void GetInstanceCertificate::SharedDtor() {
}

void GetInstanceCertificate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInstanceCertificate::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetInstanceCertificate& GetInstanceCertificate::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetInstanceCertificate* GetInstanceCertificate::New(::google::protobuf::Arena* arena) const {
  GetInstanceCertificate* n = new GetInstanceCertificate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetInstanceCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
}

bool GetInstanceCertificate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  return false;
#undef DO_
}

void GetInstanceCertificate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
}

::google::protobuf::uint8* GetInstanceCertificate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  return target;
}

size_t GetInstanceCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInstanceCertificate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInstanceCertificate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetInstanceCertificate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
    MergeFrom(*source);
  }
}

void GetInstanceCertificate::MergeFrom(const GetInstanceCertificate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetInstanceCertificate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstanceCertificate::CopyFrom(const GetInstanceCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstanceCertificate::IsInitialized() const {
  return true;
}

void GetInstanceCertificate::Swap(GetInstanceCertificate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInstanceCertificate::InternalSwap(GetInstanceCertificate* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetInstanceCertificate::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetInstanceCertificate

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActivateGameSession::kGameSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActivateGameSession::ActivateGameSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
}
ActivateGameSession::ActivateGameSession(const ActivateGameSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gamesession()) {
    gamesession_ = new ::com::amazon::whitewater::auxproxy::pbuffer::GameSession(*from.gamesession_);
  } else {
    gamesession_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
}

void ActivateGameSession::SharedCtor() {
  gamesession_ = NULL;
  _cached_size_ = 0;
}

ActivateGameSession::~ActivateGameSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  SharedDtor();
}

void ActivateGameSession::SharedDtor() {
  if (this != internal_default_instance()) {
    delete gamesession_;
  }
}

void ActivateGameSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivateGameSession::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActivateGameSession& ActivateGameSession::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActivateGameSession* ActivateGameSession::New(::google::protobuf::Arena* arena) const {
  ActivateGameSession* n = new ActivateGameSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActivateGameSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  if (GetArenaNoVirtual() == NULL && gamesession_ != NULL) {
    delete gamesession_;
  }
  gamesession_ = NULL;
}

bool ActivateGameSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamesession()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  return false;
#undef DO_
}

void ActivateGameSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
  if (this->has_gamesession()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->gamesession_, output);
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
}

::google::protobuf::uint8* ActivateGameSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
  if (this->has_gamesession()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->gamesession_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  return target;
}

size_t ActivateGameSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  size_t total_size = 0;

  // .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
  if (this->has_gamesession()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gamesession_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivateGameSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivateGameSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActivateGameSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
    MergeFrom(*source);
  }
}

void ActivateGameSession::MergeFrom(const ActivateGameSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gamesession()) {
    mutable_gamesession()->::com::amazon::whitewater::auxproxy::pbuffer::GameSession::MergeFrom(from.gamesession());
  }
}

void ActivateGameSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivateGameSession::CopyFrom(const ActivateGameSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivateGameSession::IsInitialized() const {
  return true;
}

void ActivateGameSession::Swap(ActivateGameSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActivateGameSession::InternalSwap(ActivateGameSession* other) {
  std::swap(gamesession_, other->gamesession_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActivateGameSession::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActivateGameSession

// .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
bool ActivateGameSession::has_gamesession() const {
  return this != internal_default_instance() && gamesession_ != NULL;
}
void ActivateGameSession::clear_gamesession() {
  if (GetArenaNoVirtual() == NULL && gamesession_ != NULL) delete gamesession_;
  gamesession_ = NULL;
}
const ::com::amazon::whitewater::auxproxy::pbuffer::GameSession& ActivateGameSession::gamesession() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession.gameSession)
  return gamesession_ != NULL ? *gamesession_
                         : *::com::amazon::whitewater::auxproxy::pbuffer::GameSession::internal_default_instance();
}
::com::amazon::whitewater::auxproxy::pbuffer::GameSession* ActivateGameSession::mutable_gamesession() {
  
  if (gamesession_ == NULL) {
    gamesession_ = new ::com::amazon::whitewater::auxproxy::pbuffer::GameSession;
  }
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession.gameSession)
  return gamesession_;
}
::com::amazon::whitewater::auxproxy::pbuffer::GameSession* ActivateGameSession::release_gamesession() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession.gameSession)
  
  ::com::amazon::whitewater::auxproxy::pbuffer::GameSession* temp = gamesession_;
  gamesession_ = NULL;
  return temp;
}
void ActivateGameSession::set_allocated_gamesession(::com::amazon::whitewater::auxproxy::pbuffer::GameSession* gamesession) {
  delete gamesession_;
  gamesession_ = gamesession;
  if (gamesession) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession.gameSession)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TerminateProcess::kTerminationTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TerminateProcess::TerminateProcess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
}
TerminateProcess::TerminateProcess(const TerminateProcess& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  terminationtime_ = from.terminationtime_;
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
}

void TerminateProcess::SharedCtor() {
  terminationtime_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

TerminateProcess::~TerminateProcess() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  SharedDtor();
}

void TerminateProcess::SharedDtor() {
}

void TerminateProcess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TerminateProcess::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TerminateProcess& TerminateProcess::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

TerminateProcess* TerminateProcess::New(::google::protobuf::Arena* arena) const {
  TerminateProcess* n = new TerminateProcess;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TerminateProcess::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  terminationtime_ = GOOGLE_LONGLONG(0);
}

bool TerminateProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 terminationTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &terminationtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  return false;
#undef DO_
}

void TerminateProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 terminationTime = 1;
  if (this->terminationtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->terminationtime(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
}

::google::protobuf::uint8* TerminateProcess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 terminationTime = 1;
  if (this->terminationtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->terminationtime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  return target;
}

size_t TerminateProcess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  size_t total_size = 0;

  // int64 terminationTime = 1;
  if (this->terminationtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->terminationtime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TerminateProcess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  GOOGLE_DCHECK_NE(&from, this);
  const TerminateProcess* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TerminateProcess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
    MergeFrom(*source);
  }
}

void TerminateProcess::MergeFrom(const TerminateProcess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.terminationtime() != 0) {
    set_terminationtime(from.terminationtime());
  }
}

void TerminateProcess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TerminateProcess::CopyFrom(const TerminateProcess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminateProcess::IsInitialized() const {
  return true;
}

void TerminateProcess::Swap(TerminateProcess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TerminateProcess::InternalSwap(TerminateProcess* other) {
  std::swap(terminationtime_, other->terminationtime_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TerminateProcess::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TerminateProcess

// int64 terminationTime = 1;
void TerminateProcess::clear_terminationtime() {
  terminationtime_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TerminateProcess::terminationtime() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess.terminationTime)
  return terminationtime_;
}
void TerminateProcess::set_terminationtime(::google::protobuf::int64 value) {
  
  terminationtime_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess.terminationTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DescribePlayerSessionsResponse::kNextTokenFieldNumber;
const int DescribePlayerSessionsResponse::kPlayerSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DescribePlayerSessionsResponse::DescribePlayerSessionsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
}
DescribePlayerSessionsResponse::DescribePlayerSessionsResponse(const DescribePlayerSessionsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      playersessions_(from.playersessions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nexttoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nexttoken().size() > 0) {
    nexttoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nexttoken_);
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
}

void DescribePlayerSessionsResponse::SharedCtor() {
  nexttoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DescribePlayerSessionsResponse::~DescribePlayerSessionsResponse() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  SharedDtor();
}

void DescribePlayerSessionsResponse::SharedDtor() {
  nexttoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DescribePlayerSessionsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DescribePlayerSessionsResponse::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DescribePlayerSessionsResponse& DescribePlayerSessionsResponse::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

DescribePlayerSessionsResponse* DescribePlayerSessionsResponse::New(::google::protobuf::Arena* arena) const {
  DescribePlayerSessionsResponse* n = new DescribePlayerSessionsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DescribePlayerSessionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  playersessions_.Clear();
  nexttoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DescribePlayerSessionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string nextToken = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nexttoken()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nexttoken().data(), this->nexttoken().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.amazon.whitewater.auxproxy.pbuffer.PlayerSession playerSessions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playersessions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  return false;
#undef DO_
}

void DescribePlayerSessionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nextToken = 1;
  if (this->nexttoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nexttoken().data(), this->nexttoken().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nexttoken(), output);
  }

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.PlayerSession playerSessions = 2;
  for (unsigned int i = 0, n = this->playersessions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playersessions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
}

::google::protobuf::uint8* DescribePlayerSessionsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nextToken = 1;
  if (this->nexttoken().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nexttoken().data(), this->nexttoken().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nexttoken(), target);
  }

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.PlayerSession playerSessions = 2;
  for (unsigned int i = 0, n = this->playersessions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->playersessions(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  return target;
}

size_t DescribePlayerSessionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  size_t total_size = 0;

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.PlayerSession playerSessions = 2;
  {
    unsigned int count = this->playersessions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playersessions(i));
    }
  }

  // string nextToken = 1;
  if (this->nexttoken().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nexttoken());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DescribePlayerSessionsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DescribePlayerSessionsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DescribePlayerSessionsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
    MergeFrom(*source);
  }
}

void DescribePlayerSessionsResponse::MergeFrom(const DescribePlayerSessionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playersessions_.MergeFrom(from.playersessions_);
  if (from.nexttoken().size() > 0) {

    nexttoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nexttoken_);
  }
}

void DescribePlayerSessionsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DescribePlayerSessionsResponse::CopyFrom(const DescribePlayerSessionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DescribePlayerSessionsResponse::IsInitialized() const {
  return true;
}

void DescribePlayerSessionsResponse::Swap(DescribePlayerSessionsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DescribePlayerSessionsResponse::InternalSwap(DescribePlayerSessionsResponse* other) {
  playersessions_.InternalSwap(&other->playersessions_);
  nexttoken_.Swap(&other->nexttoken_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DescribePlayerSessionsResponse::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DescribePlayerSessionsResponse

// string nextToken = 1;
void DescribePlayerSessionsResponse::clear_nexttoken() {
  nexttoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DescribePlayerSessionsResponse::nexttoken() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
  return nexttoken_.GetNoArena();
}
void DescribePlayerSessionsResponse::set_nexttoken(const ::std::string& value) {
  
  nexttoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
}
#if LANG_CXX11
void DescribePlayerSessionsResponse::set_nexttoken(::std::string&& value) {
  
  nexttoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
}
#endif
void DescribePlayerSessionsResponse::set_nexttoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nexttoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
}
void DescribePlayerSessionsResponse::set_nexttoken(const char* value, size_t size) {
  
  nexttoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
}
::std::string* DescribePlayerSessionsResponse::mutable_nexttoken() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
  return nexttoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DescribePlayerSessionsResponse::release_nexttoken() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
  
  return nexttoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DescribePlayerSessionsResponse::set_allocated_nexttoken(::std::string* nexttoken) {
  if (nexttoken != NULL) {
    
  } else {
    
  }
  nexttoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nexttoken);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
}

// repeated .com.amazon.whitewater.auxproxy.pbuffer.PlayerSession playerSessions = 2;
int DescribePlayerSessionsResponse::playersessions_size() const {
  return playersessions_.size();
}
void DescribePlayerSessionsResponse::clear_playersessions() {
  playersessions_.Clear();
}
const ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession& DescribePlayerSessionsResponse::playersessions(int index) const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.playerSessions)
  return playersessions_.Get(index);
}
::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession* DescribePlayerSessionsResponse::mutable_playersessions(int index) {
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.playerSessions)
  return playersessions_.Mutable(index);
}
::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession* DescribePlayerSessionsResponse::add_playersessions() {
  // @@protoc_insertion_point(field_add:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.playerSessions)
  return playersessions_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession >*
DescribePlayerSessionsResponse::mutable_playersessions() {
  // @@protoc_insertion_point(field_mutable_list:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.playerSessions)
  return &playersessions_;
}
const ::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession >&
DescribePlayerSessionsResponse::playersessions() const {
  // @@protoc_insertion_point(field_list:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.playerSessions)
  return playersessions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateGameSession::kGameSessionFieldNumber;
const int UpdateGameSession::kUpdateReasonFieldNumber;
const int UpdateGameSession::kBackfillTicketIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateGameSession::UpdateGameSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
}
UpdateGameSession::UpdateGameSession(const UpdateGameSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  updatereason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.updatereason().size() > 0) {
    updatereason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.updatereason_);
  }
  backfillticketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.backfillticketid().size() > 0) {
    backfillticketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backfillticketid_);
  }
  if (from.has_gamesession()) {
    gamesession_ = new ::com::amazon::whitewater::auxproxy::pbuffer::GameSession(*from.gamesession_);
  } else {
    gamesession_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
}

void UpdateGameSession::SharedCtor() {
  updatereason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backfillticketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesession_ = NULL;
  _cached_size_ = 0;
}

UpdateGameSession::~UpdateGameSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  SharedDtor();
}

void UpdateGameSession::SharedDtor() {
  updatereason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backfillticketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete gamesession_;
  }
}

void UpdateGameSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGameSession::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateGameSession& UpdateGameSession::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateGameSession* UpdateGameSession::New(::google::protobuf::Arena* arena) const {
  UpdateGameSession* n = new UpdateGameSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateGameSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  updatereason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backfillticketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && gamesession_ != NULL) {
    delete gamesession_;
  }
  gamesession_ = NULL;
}

bool UpdateGameSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamesession()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string updateReason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatereason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->updatereason().data(), this->updatereason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string backfillTicketId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backfillticketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->backfillticketid().data(), this->backfillticketid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  return false;
#undef DO_
}

void UpdateGameSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
  if (this->has_gamesession()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->gamesession_, output);
  }

  // string updateReason = 2;
  if (this->updatereason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->updatereason().data(), this->updatereason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->updatereason(), output);
  }

  // string backfillTicketId = 3;
  if (this->backfillticketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->backfillticketid().data(), this->backfillticketid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->backfillticketid(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
}

::google::protobuf::uint8* UpdateGameSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
  if (this->has_gamesession()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->gamesession_, deterministic, target);
  }

  // string updateReason = 2;
  if (this->updatereason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->updatereason().data(), this->updatereason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->updatereason(), target);
  }

  // string backfillTicketId = 3;
  if (this->backfillticketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->backfillticketid().data(), this->backfillticketid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->backfillticketid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  return target;
}

size_t UpdateGameSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  size_t total_size = 0;

  // string updateReason = 2;
  if (this->updatereason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->updatereason());
  }

  // string backfillTicketId = 3;
  if (this->backfillticketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->backfillticketid());
  }

  // .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
  if (this->has_gamesession()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gamesession_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGameSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateGameSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateGameSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
    MergeFrom(*source);
  }
}

void UpdateGameSession::MergeFrom(const UpdateGameSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.updatereason().size() > 0) {

    updatereason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.updatereason_);
  }
  if (from.backfillticketid().size() > 0) {

    backfillticketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backfillticketid_);
  }
  if (from.has_gamesession()) {
    mutable_gamesession()->::com::amazon::whitewater::auxproxy::pbuffer::GameSession::MergeFrom(from.gamesession());
  }
}

void UpdateGameSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGameSession::CopyFrom(const UpdateGameSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGameSession::IsInitialized() const {
  return true;
}

void UpdateGameSession::Swap(UpdateGameSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateGameSession::InternalSwap(UpdateGameSession* other) {
  updatereason_.Swap(&other->updatereason_);
  backfillticketid_.Swap(&other->backfillticketid_);
  std::swap(gamesession_, other->gamesession_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateGameSession::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateGameSession

// .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
bool UpdateGameSession::has_gamesession() const {
  return this != internal_default_instance() && gamesession_ != NULL;
}
void UpdateGameSession::clear_gamesession() {
  if (GetArenaNoVirtual() == NULL && gamesession_ != NULL) delete gamesession_;
  gamesession_ = NULL;
}
const ::com::amazon::whitewater::auxproxy::pbuffer::GameSession& UpdateGameSession::gamesession() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.gameSession)
  return gamesession_ != NULL ? *gamesession_
                         : *::com::amazon::whitewater::auxproxy::pbuffer::GameSession::internal_default_instance();
}
::com::amazon::whitewater::auxproxy::pbuffer::GameSession* UpdateGameSession::mutable_gamesession() {
  
  if (gamesession_ == NULL) {
    gamesession_ = new ::com::amazon::whitewater::auxproxy::pbuffer::GameSession;
  }
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.gameSession)
  return gamesession_;
}
::com::amazon::whitewater::auxproxy::pbuffer::GameSession* UpdateGameSession::release_gamesession() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.gameSession)
  
  ::com::amazon::whitewater::auxproxy::pbuffer::GameSession* temp = gamesession_;
  gamesession_ = NULL;
  return temp;
}
void UpdateGameSession::set_allocated_gamesession(::com::amazon::whitewater::auxproxy::pbuffer::GameSession* gamesession) {
  delete gamesession_;
  gamesession_ = gamesession;
  if (gamesession) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.gameSession)
}

// string updateReason = 2;
void UpdateGameSession::clear_updatereason() {
  updatereason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateGameSession::updatereason() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason)
  return updatereason_.GetNoArena();
}
void UpdateGameSession::set_updatereason(const ::std::string& value) {
  
  updatereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason)
}
#if LANG_CXX11
void UpdateGameSession::set_updatereason(::std::string&& value) {
  
  updatereason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason)
}
#endif
void UpdateGameSession::set_updatereason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  updatereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason)
}
void UpdateGameSession::set_updatereason(const char* value, size_t size) {
  
  updatereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason)
}
::std::string* UpdateGameSession::mutable_updatereason() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason)
  return updatereason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateGameSession::release_updatereason() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason)
  
  return updatereason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateGameSession::set_allocated_updatereason(::std::string* updatereason) {
  if (updatereason != NULL) {
    
  } else {
    
  }
  updatereason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updatereason);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason)
}

// string backfillTicketId = 3;
void UpdateGameSession::clear_backfillticketid() {
  backfillticketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UpdateGameSession::backfillticketid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId)
  return backfillticketid_.GetNoArena();
}
void UpdateGameSession::set_backfillticketid(const ::std::string& value) {
  
  backfillticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId)
}
#if LANG_CXX11
void UpdateGameSession::set_backfillticketid(::std::string&& value) {
  
  backfillticketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId)
}
#endif
void UpdateGameSession::set_backfillticketid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  backfillticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId)
}
void UpdateGameSession::set_backfillticketid(const char* value, size_t size) {
  
  backfillticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId)
}
::std::string* UpdateGameSession::mutable_backfillticketid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId)
  return backfillticketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UpdateGameSession::release_backfillticketid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId)
  
  return backfillticketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UpdateGameSession::set_allocated_backfillticketid(::std::string* backfillticketid) {
  if (backfillticketid != NULL) {
    
  } else {
    
  }
  backfillticketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), backfillticketid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetInstanceCertificateResponse::kCertificatePathFieldNumber;
const int GetInstanceCertificateResponse::kCertificateChainPathFieldNumber;
const int GetInstanceCertificateResponse::kPrivateKeyPathFieldNumber;
const int GetInstanceCertificateResponse::kHostNameFieldNumber;
const int GetInstanceCertificateResponse::kRootCertificatePathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInstanceCertificateResponse::GetInstanceCertificateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
}
GetInstanceCertificateResponse::GetInstanceCertificateResponse(const GetInstanceCertificateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  certificatepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.certificatepath().size() > 0) {
    certificatepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certificatepath_);
  }
  certificatechainpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.certificatechainpath().size() > 0) {
    certificatechainpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certificatechainpath_);
  }
  privatekeypath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.privatekeypath().size() > 0) {
    privatekeypath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.privatekeypath_);
  }
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hostname().size() > 0) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  rootcertificatepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rootcertificatepath().size() > 0) {
    rootcertificatepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rootcertificatepath_);
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
}

void GetInstanceCertificateResponse::SharedCtor() {
  certificatepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certificatechainpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  privatekeypath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rootcertificatepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetInstanceCertificateResponse::~GetInstanceCertificateResponse() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  SharedDtor();
}

void GetInstanceCertificateResponse::SharedDtor() {
  certificatepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certificatechainpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  privatekeypath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rootcertificatepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetInstanceCertificateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInstanceCertificateResponse::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetInstanceCertificateResponse& GetInstanceCertificateResponse::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetInstanceCertificateResponse* GetInstanceCertificateResponse::New(::google::protobuf::Arena* arena) const {
  GetInstanceCertificateResponse* n = new GetInstanceCertificateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetInstanceCertificateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  certificatepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certificatechainpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  privatekeypath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rootcertificatepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetInstanceCertificateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string certificatePath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_certificatepath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->certificatepath().data(), this->certificatepath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string certificateChainPath = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_certificatechainpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->certificatechainpath().data(), this->certificatechainpath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string privateKeyPath = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_privatekeypath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->privatekeypath().data(), this->privatekeypath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hostName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rootCertificatePath = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rootcertificatepath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rootcertificatepath().data(), this->rootcertificatepath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  return false;
#undef DO_
}

void GetInstanceCertificateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string certificatePath = 1;
  if (this->certificatepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certificatepath().data(), this->certificatepath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->certificatepath(), output);
  }

  // string certificateChainPath = 2;
  if (this->certificatechainpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certificatechainpath().data(), this->certificatechainpath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->certificatechainpath(), output);
  }

  // string privateKeyPath = 3;
  if (this->privatekeypath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->privatekeypath().data(), this->privatekeypath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->privatekeypath(), output);
  }

  // string hostName = 4;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hostname(), output);
  }

  // string rootCertificatePath = 5;
  if (this->rootcertificatepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rootcertificatepath().data(), this->rootcertificatepath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->rootcertificatepath(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
}

::google::protobuf::uint8* GetInstanceCertificateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string certificatePath = 1;
  if (this->certificatepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certificatepath().data(), this->certificatepath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->certificatepath(), target);
  }

  // string certificateChainPath = 2;
  if (this->certificatechainpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certificatechainpath().data(), this->certificatechainpath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->certificatechainpath(), target);
  }

  // string privateKeyPath = 3;
  if (this->privatekeypath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->privatekeypath().data(), this->privatekeypath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->privatekeypath(), target);
  }

  // string hostName = 4;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hostname(), target);
  }

  // string rootCertificatePath = 5;
  if (this->rootcertificatepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rootcertificatepath().data(), this->rootcertificatepath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->rootcertificatepath(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  return target;
}

size_t GetInstanceCertificateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  size_t total_size = 0;

  // string certificatePath = 1;
  if (this->certificatepath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->certificatepath());
  }

  // string certificateChainPath = 2;
  if (this->certificatechainpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->certificatechainpath());
  }

  // string privateKeyPath = 3;
  if (this->privatekeypath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->privatekeypath());
  }

  // string hostName = 4;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  // string rootCertificatePath = 5;
  if (this->rootcertificatepath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rootcertificatepath());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInstanceCertificateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInstanceCertificateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetInstanceCertificateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
    MergeFrom(*source);
  }
}

void GetInstanceCertificateResponse::MergeFrom(const GetInstanceCertificateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.certificatepath().size() > 0) {

    certificatepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certificatepath_);
  }
  if (from.certificatechainpath().size() > 0) {

    certificatechainpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certificatechainpath_);
  }
  if (from.privatekeypath().size() > 0) {

    privatekeypath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.privatekeypath_);
  }
  if (from.hostname().size() > 0) {

    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  if (from.rootcertificatepath().size() > 0) {

    rootcertificatepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rootcertificatepath_);
  }
}

void GetInstanceCertificateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstanceCertificateResponse::CopyFrom(const GetInstanceCertificateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstanceCertificateResponse::IsInitialized() const {
  return true;
}

void GetInstanceCertificateResponse::Swap(GetInstanceCertificateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetInstanceCertificateResponse::InternalSwap(GetInstanceCertificateResponse* other) {
  certificatepath_.Swap(&other->certificatepath_);
  certificatechainpath_.Swap(&other->certificatechainpath_);
  privatekeypath_.Swap(&other->privatekeypath_);
  hostname_.Swap(&other->hostname_);
  rootcertificatepath_.Swap(&other->rootcertificatepath_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetInstanceCertificateResponse::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetInstanceCertificateResponse

// string certificatePath = 1;
void GetInstanceCertificateResponse::clear_certificatepath() {
  certificatepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetInstanceCertificateResponse::certificatepath() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath)
  return certificatepath_.GetNoArena();
}
void GetInstanceCertificateResponse::set_certificatepath(const ::std::string& value) {
  
  certificatepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath)
}
#if LANG_CXX11
void GetInstanceCertificateResponse::set_certificatepath(::std::string&& value) {
  
  certificatepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath)
}
#endif
void GetInstanceCertificateResponse::set_certificatepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  certificatepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath)
}
void GetInstanceCertificateResponse::set_certificatepath(const char* value, size_t size) {
  
  certificatepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath)
}
::std::string* GetInstanceCertificateResponse::mutable_certificatepath() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath)
  return certificatepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetInstanceCertificateResponse::release_certificatepath() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath)
  
  return certificatepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetInstanceCertificateResponse::set_allocated_certificatepath(::std::string* certificatepath) {
  if (certificatepath != NULL) {
    
  } else {
    
  }
  certificatepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certificatepath);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath)
}

// string certificateChainPath = 2;
void GetInstanceCertificateResponse::clear_certificatechainpath() {
  certificatechainpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetInstanceCertificateResponse::certificatechainpath() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath)
  return certificatechainpath_.GetNoArena();
}
void GetInstanceCertificateResponse::set_certificatechainpath(const ::std::string& value) {
  
  certificatechainpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath)
}
#if LANG_CXX11
void GetInstanceCertificateResponse::set_certificatechainpath(::std::string&& value) {
  
  certificatechainpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath)
}
#endif
void GetInstanceCertificateResponse::set_certificatechainpath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  certificatechainpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath)
}
void GetInstanceCertificateResponse::set_certificatechainpath(const char* value, size_t size) {
  
  certificatechainpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath)
}
::std::string* GetInstanceCertificateResponse::mutable_certificatechainpath() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath)
  return certificatechainpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetInstanceCertificateResponse::release_certificatechainpath() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath)
  
  return certificatechainpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetInstanceCertificateResponse::set_allocated_certificatechainpath(::std::string* certificatechainpath) {
  if (certificatechainpath != NULL) {
    
  } else {
    
  }
  certificatechainpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certificatechainpath);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath)
}

// string privateKeyPath = 3;
void GetInstanceCertificateResponse::clear_privatekeypath() {
  privatekeypath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetInstanceCertificateResponse::privatekeypath() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath)
  return privatekeypath_.GetNoArena();
}
void GetInstanceCertificateResponse::set_privatekeypath(const ::std::string& value) {
  
  privatekeypath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath)
}
#if LANG_CXX11
void GetInstanceCertificateResponse::set_privatekeypath(::std::string&& value) {
  
  privatekeypath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath)
}
#endif
void GetInstanceCertificateResponse::set_privatekeypath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  privatekeypath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath)
}
void GetInstanceCertificateResponse::set_privatekeypath(const char* value, size_t size) {
  
  privatekeypath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath)
}
::std::string* GetInstanceCertificateResponse::mutable_privatekeypath() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath)
  return privatekeypath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetInstanceCertificateResponse::release_privatekeypath() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath)
  
  return privatekeypath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetInstanceCertificateResponse::set_allocated_privatekeypath(::std::string* privatekeypath) {
  if (privatekeypath != NULL) {
    
  } else {
    
  }
  privatekeypath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), privatekeypath);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath)
}

// string hostName = 4;
void GetInstanceCertificateResponse::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetInstanceCertificateResponse::hostname() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName)
  return hostname_.GetNoArena();
}
void GetInstanceCertificateResponse::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName)
}
#if LANG_CXX11
void GetInstanceCertificateResponse::set_hostname(::std::string&& value) {
  
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName)
}
#endif
void GetInstanceCertificateResponse::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName)
}
void GetInstanceCertificateResponse::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName)
}
::std::string* GetInstanceCertificateResponse::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetInstanceCertificateResponse::release_hostname() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetInstanceCertificateResponse::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName)
}

// string rootCertificatePath = 5;
void GetInstanceCertificateResponse::clear_rootcertificatepath() {
  rootcertificatepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetInstanceCertificateResponse::rootcertificatepath() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath)
  return rootcertificatepath_.GetNoArena();
}
void GetInstanceCertificateResponse::set_rootcertificatepath(const ::std::string& value) {
  
  rootcertificatepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath)
}
#if LANG_CXX11
void GetInstanceCertificateResponse::set_rootcertificatepath(::std::string&& value) {
  
  rootcertificatepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath)
}
#endif
void GetInstanceCertificateResponse::set_rootcertificatepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rootcertificatepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath)
}
void GetInstanceCertificateResponse::set_rootcertificatepath(const char* value, size_t size) {
  
  rootcertificatepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath)
}
::std::string* GetInstanceCertificateResponse::mutable_rootcertificatepath() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath)
  return rootcertificatepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetInstanceCertificateResponse::release_rootcertificatepath() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath)
  
  return rootcertificatepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetInstanceCertificateResponse::set_allocated_rootcertificatepath(::std::string* rootcertificatepath) {
  if (rootcertificatepath != NULL) {
    
  } else {
    
  }
  rootcertificatepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rootcertificatepath);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackfillMatchmakingResponse::kTicketIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackfillMatchmakingResponse::BackfillMatchmakingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
}
BackfillMatchmakingResponse::BackfillMatchmakingResponse(const BackfillMatchmakingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ticketid().size() > 0) {
    ticketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticketid_);
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
}

void BackfillMatchmakingResponse::SharedCtor() {
  ticketid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BackfillMatchmakingResponse::~BackfillMatchmakingResponse() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  SharedDtor();
}

void BackfillMatchmakingResponse::SharedDtor() {
  ticketid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BackfillMatchmakingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackfillMatchmakingResponse::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackfillMatchmakingResponse& BackfillMatchmakingResponse::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackfillMatchmakingResponse* BackfillMatchmakingResponse::New(::google::protobuf::Arena* arena) const {
  BackfillMatchmakingResponse* n = new BackfillMatchmakingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackfillMatchmakingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  ticketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BackfillMatchmakingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ticketId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ticketid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ticketid().data(), this->ticketid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  return false;
#undef DO_
}

void BackfillMatchmakingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticketId = 1;
  if (this->ticketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticketid().data(), this->ticketid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ticketid(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
}

::google::protobuf::uint8* BackfillMatchmakingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ticketId = 1;
  if (this->ticketid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ticketid().data(), this->ticketid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ticketid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  return target;
}

size_t BackfillMatchmakingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  size_t total_size = 0;

  // string ticketId = 1;
  if (this->ticketid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ticketid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackfillMatchmakingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BackfillMatchmakingResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackfillMatchmakingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
    MergeFrom(*source);
  }
}

void BackfillMatchmakingResponse::MergeFrom(const BackfillMatchmakingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ticketid().size() > 0) {

    ticketid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticketid_);
  }
}

void BackfillMatchmakingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackfillMatchmakingResponse::CopyFrom(const BackfillMatchmakingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackfillMatchmakingResponse::IsInitialized() const {
  return true;
}

void BackfillMatchmakingResponse::Swap(BackfillMatchmakingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackfillMatchmakingResponse::InternalSwap(BackfillMatchmakingResponse* other) {
  ticketid_.Swap(&other->ticketid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackfillMatchmakingResponse::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackfillMatchmakingResponse

// string ticketId = 1;
void BackfillMatchmakingResponse::clear_ticketid() {
  ticketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BackfillMatchmakingResponse::ticketid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId)
  return ticketid_.GetNoArena();
}
void BackfillMatchmakingResponse::set_ticketid(const ::std::string& value) {
  
  ticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId)
}
#if LANG_CXX11
void BackfillMatchmakingResponse::set_ticketid(::std::string&& value) {
  
  ticketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId)
}
#endif
void BackfillMatchmakingResponse::set_ticketid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId)
}
void BackfillMatchmakingResponse::set_ticketid(const char* value, size_t size) {
  
  ticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId)
}
::std::string* BackfillMatchmakingResponse::mutable_ticketid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId)
  return ticketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BackfillMatchmakingResponse::release_ticketid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId)
  
  return ticketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BackfillMatchmakingResponse::set_allocated_ticketid(::std::string* ticketid) {
  if (ticketid != NULL) {
    
  } else {
    
  }
  ticketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticketid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kStatusFieldNumber;
const int Response::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.Response)
}
Response::Response(const Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errormessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errormessage().size() > 0) {
    errormessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.Response)
}

void Response::SharedCtor() {
  errormessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _cached_size_ = 0;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  errormessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Response& Response::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  errormessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.amazon.whitewater.auxproxy.pbuffer.Response.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::com::amazon::whitewater::auxproxy::pbuffer::Response_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errorMessage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errormessage().data(), this->errormessage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.amazon.whitewater.auxproxy.pbuffer.Response.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // string errorMessage = 2;
  if (this->errormessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errormessage(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.amazon.whitewater.auxproxy.pbuffer.Response.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // string errorMessage = 2;
  if (this->errormessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errormessage(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  size_t total_size = 0;

  // string errorMessage = 2;
  if (this->errormessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errormessage());
  }

  // .com.amazon.whitewater.auxproxy.pbuffer.Response.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errormessage().size() > 0) {

    errormessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  errormessage_.Swap(&other->errormessage_);
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// .com.amazon.whitewater.auxproxy.pbuffer.Response.Status status = 1;
void Response::clear_status() {
  status_ = 0;
}
::com::amazon::whitewater::auxproxy::pbuffer::Response_Status Response::status() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.Response.status)
  return static_cast< ::com::amazon::whitewater::auxproxy::pbuffer::Response_Status >(status_);
}
void Response::set_status(::com::amazon::whitewater::auxproxy::pbuffer::Response_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.Response.status)
}

// string errorMessage = 2;
void Response::clear_errormessage() {
  errormessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Response::errormessage() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
  return errormessage_.GetNoArena();
}
void Response::set_errormessage(const ::std::string& value) {
  
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
}
#if LANG_CXX11
void Response::set_errormessage(::std::string&& value) {
  
  errormessage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
}
#endif
void Response::set_errormessage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
}
void Response::set_errormessage(const char* value, size_t size) {
  
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
}
::std::string* Response::mutable_errormessage() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
  return errormessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Response::release_errormessage() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
  
  return errormessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Response::set_allocated_errormessage(::std::string* errormessage) {
  if (errormessage != NULL) {
    
  } else {
    
  }
  errormessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormessage);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameLiftResponse::kStatusFieldNumber;
const int GameLiftResponse::kResponseDataFieldNumber;
const int GameLiftResponse::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameLiftResponse::GameLiftResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
}
GameLiftResponse::GameLiftResponse(const GameLiftResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  responsedata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.responsedata().size() > 0) {
    responsedata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.responsedata_);
  }
  errormessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errormessage().size() > 0) {
    errormessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
}

void GameLiftResponse::SharedCtor() {
  responsedata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errormessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _cached_size_ = 0;
}

GameLiftResponse::~GameLiftResponse() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  SharedDtor();
}

void GameLiftResponse::SharedDtor() {
  responsedata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errormessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameLiftResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameLiftResponse::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameLiftResponse& GameLiftResponse::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameLiftResponse* GameLiftResponse::New(::google::protobuf::Arena* arena) const {
  GameLiftResponse* n = new GameLiftResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameLiftResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  responsedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errormessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

bool GameLiftResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string responseData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_responsedata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->responsedata().data(), this->responsedata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errorMessage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errormessage().data(), this->errormessage().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  return false;
#undef DO_
}

void GameLiftResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // string responseData = 2;
  if (this->responsedata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->responsedata().data(), this->responsedata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->responsedata(), output);
  }

  // string errorMessage = 3;
  if (this->errormessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errormessage(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
}

::google::protobuf::uint8* GameLiftResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // string responseData = 2;
  if (this->responsedata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->responsedata().data(), this->responsedata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->responsedata(), target);
  }

  // string errorMessage = 3;
  if (this->errormessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errormessage().data(), this->errormessage().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errormessage(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  return target;
}

size_t GameLiftResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  size_t total_size = 0;

  // string responseData = 2;
  if (this->responsedata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->responsedata());
  }

  // string errorMessage = 3;
  if (this->errormessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errormessage());
  }

  // .com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameLiftResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GameLiftResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameLiftResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
    MergeFrom(*source);
  }
}

void GameLiftResponse::MergeFrom(const GameLiftResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.responsedata().size() > 0) {

    responsedata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.responsedata_);
  }
  if (from.errormessage().size() > 0) {

    errormessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void GameLiftResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLiftResponse::CopyFrom(const GameLiftResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameLiftResponse::IsInitialized() const {
  return true;
}

void GameLiftResponse::Swap(GameLiftResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameLiftResponse::InternalSwap(GameLiftResponse* other) {
  responsedata_.Swap(&other->responsedata_);
  errormessage_.Swap(&other->errormessage_);
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameLiftResponse::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameLiftResponse

// .com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.Status status = 1;
void GameLiftResponse::clear_status() {
  status_ = 0;
}
::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse_Status GameLiftResponse::status() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.status)
  return static_cast< ::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse_Status >(status_);
}
void GameLiftResponse::set_status(::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.status)
}

// string responseData = 2;
void GameLiftResponse::clear_responsedata() {
  responsedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GameLiftResponse::responsedata() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData)
  return responsedata_.GetNoArena();
}
void GameLiftResponse::set_responsedata(const ::std::string& value) {
  
  responsedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData)
}
#if LANG_CXX11
void GameLiftResponse::set_responsedata(::std::string&& value) {
  
  responsedata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData)
}
#endif
void GameLiftResponse::set_responsedata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  responsedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData)
}
void GameLiftResponse::set_responsedata(const char* value, size_t size) {
  
  responsedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData)
}
::std::string* GameLiftResponse::mutable_responsedata() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData)
  return responsedata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameLiftResponse::release_responsedata() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData)
  
  return responsedata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameLiftResponse::set_allocated_responsedata(::std::string* responsedata) {
  if (responsedata != NULL) {
    
  } else {
    
  }
  responsedata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), responsedata);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData)
}

// string errorMessage = 3;
void GameLiftResponse::clear_errormessage() {
  errormessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GameLiftResponse::errormessage() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage)
  return errormessage_.GetNoArena();
}
void GameLiftResponse::set_errormessage(const ::std::string& value) {
  
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage)
}
#if LANG_CXX11
void GameLiftResponse::set_errormessage(::std::string&& value) {
  
  errormessage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage)
}
#endif
void GameLiftResponse::set_errormessage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage)
}
void GameLiftResponse::set_errormessage(const char* value, size_t size) {
  
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage)
}
::std::string* GameLiftResponse::mutable_errormessage() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage)
  return errormessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameLiftResponse::release_errormessage() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage)
  
  return errormessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameLiftResponse::set_allocated_errormessage(::std::string* errormessage) {
  if (errormessage != NULL) {
    
  } else {
    
  }
  errormessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormessage);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameSession::kGameSessionIdFieldNumber;
const int GameSession::kFleetIdFieldNumber;
const int GameSession::kNameFieldNumber;
const int GameSession::kMaxPlayersFieldNumber;
const int GameSession::kJoinableFieldNumber;
const int GameSession::kGamePropertiesFieldNumber;
const int GameSession::kIpAddressFieldNumber;
const int GameSession::kPortFieldNumber;
const int GameSession::kGameSessionDataFieldNumber;
const int GameSession::kMatchmakerDataFieldNumber;
const int GameSession::kDnsNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameSession::GameSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
}
GameSession::GameSession(const GameSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      gameproperties_(from.gameproperties_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamesessionid().size() > 0) {
    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  fleetid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fleetid().size() > 0) {
    fleetid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fleetid_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ipaddress().size() > 0) {
    ipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  gamesessiondata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamesessiondata().size() > 0) {
    gamesessiondata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessiondata_);
  }
  matchmakerdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.matchmakerdata().size() > 0) {
    matchmakerdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matchmakerdata_);
  }
  dnsname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dnsname().size() > 0) {
    dnsname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dnsname_);
  }
  ::memcpy(&maxplayers_, &from.maxplayers_,
    reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&maxplayers_) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
}

void GameSession::SharedCtor() {
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fleetid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessiondata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matchmakerdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dnsname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxplayers_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&maxplayers_) + sizeof(port_));
  _cached_size_ = 0;
}

GameSession::~GameSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  SharedDtor();
}

void GameSession::SharedDtor() {
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fleetid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessiondata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matchmakerdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dnsname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSession::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameSession& GameSession::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameSession* GameSession::New(::google::protobuf::Arena* arena) const {
  GameSession* n = new GameSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  gameproperties_.Clear();
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fleetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessiondata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matchmakerdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dnsname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&maxplayers_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&maxplayers_) + sizeof(port_));
}

bool GameSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gameSessionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamesessionid().data(), this->gamesessionid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fleetId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fleetid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fleetid().data(), this->fleetid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSession.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maxPlayers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxplayers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool joinable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &joinable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.amazon.whitewater.auxproxy.pbuffer.GameProperty gameProperties = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gameproperties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ipAddress = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipaddress().data(), this->ipaddress().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gameSessionData = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessiondata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamesessiondata().data(), this->gamesessiondata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string matchmakerData = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matchmakerdata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->matchmakerdata().data(), this->matchmakerdata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dnsName = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dnsname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dnsname().data(), this->dnsname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  return false;
#undef DO_
}

void GameSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gamesessionid(), output);
  }

  // string fleetId = 2;
  if (this->fleetid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fleetid().data(), this->fleetid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fleetid(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // int32 maxPlayers = 4;
  if (this->maxplayers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxplayers(), output);
  }

  // bool joinable = 5;
  if (this->joinable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->joinable(), output);
  }

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.GameProperty gameProperties = 6;
  for (unsigned int i = 0, n = this->gameproperties_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->gameproperties(i), output);
  }

  // string ipAddress = 7;
  if (this->ipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ipaddress(), output);
  }

  // int32 port = 8;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->port(), output);
  }

  // string gameSessionData = 9;
  if (this->gamesessiondata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessiondata().data(), this->gamesessiondata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->gamesessiondata(), output);
  }

  // string matchmakerData = 10;
  if (this->matchmakerdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matchmakerdata().data(), this->matchmakerdata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->matchmakerdata(), output);
  }

  // string dnsName = 11;
  if (this->dnsname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dnsname().data(), this->dnsname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->dnsname(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
}

::google::protobuf::uint8* GameSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gamesessionid(), target);
  }

  // string fleetId = 2;
  if (this->fleetid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fleetid().data(), this->fleetid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fleetid(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // int32 maxPlayers = 4;
  if (this->maxplayers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxplayers(), target);
  }

  // bool joinable = 5;
  if (this->joinable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->joinable(), target);
  }

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.GameProperty gameProperties = 6;
  for (unsigned int i = 0, n = this->gameproperties_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->gameproperties(i), deterministic, target);
  }

  // string ipAddress = 7;
  if (this->ipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ipaddress(), target);
  }

  // int32 port = 8;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->port(), target);
  }

  // string gameSessionData = 9;
  if (this->gamesessiondata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessiondata().data(), this->gamesessiondata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->gamesessiondata(), target);
  }

  // string matchmakerData = 10;
  if (this->matchmakerdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->matchmakerdata().data(), this->matchmakerdata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->matchmakerdata(), target);
  }

  // string dnsName = 11;
  if (this->dnsname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dnsname().data(), this->dnsname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->dnsname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  return target;
}

size_t GameSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  size_t total_size = 0;

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.GameProperty gameProperties = 6;
  {
    unsigned int count = this->gameproperties_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameproperties(i));
    }
  }

  // string gameSessionId = 1;
  if (this->gamesessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessionid());
  }

  // string fleetId = 2;
  if (this->fleetid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fleetid());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string ipAddress = 7;
  if (this->ipaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipaddress());
  }

  // string gameSessionData = 9;
  if (this->gamesessiondata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessiondata());
  }

  // string matchmakerData = 10;
  if (this->matchmakerdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->matchmakerdata());
  }

  // string dnsName = 11;
  if (this->dnsname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dnsname());
  }

  // int32 maxPlayers = 4;
  if (this->maxplayers() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxplayers());
  }

  // bool joinable = 5;
  if (this->joinable() != 0) {
    total_size += 1 + 1;
  }

  // int32 port = 8;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
    MergeFrom(*source);
  }
}

void GameSession::MergeFrom(const GameSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gameproperties_.MergeFrom(from.gameproperties_);
  if (from.gamesessionid().size() > 0) {

    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  if (from.fleetid().size() > 0) {

    fleetid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fleetid_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ipaddress().size() > 0) {

    ipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  if (from.gamesessiondata().size() > 0) {

    gamesessiondata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessiondata_);
  }
  if (from.matchmakerdata().size() > 0) {

    matchmakerdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matchmakerdata_);
  }
  if (from.dnsname().size() > 0) {

    dnsname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dnsname_);
  }
  if (from.maxplayers() != 0) {
    set_maxplayers(from.maxplayers());
  }
  if (from.joinable() != 0) {
    set_joinable(from.joinable());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void GameSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSession::CopyFrom(const GameSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSession::IsInitialized() const {
  return true;
}

void GameSession::Swap(GameSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameSession::InternalSwap(GameSession* other) {
  gameproperties_.InternalSwap(&other->gameproperties_);
  gamesessionid_.Swap(&other->gamesessionid_);
  fleetid_.Swap(&other->fleetid_);
  name_.Swap(&other->name_);
  ipaddress_.Swap(&other->ipaddress_);
  gamesessiondata_.Swap(&other->gamesessiondata_);
  matchmakerdata_.Swap(&other->matchmakerdata_);
  dnsname_.Swap(&other->dnsname_);
  std::swap(maxplayers_, other->maxplayers_);
  std::swap(joinable_, other->joinable_);
  std::swap(port_, other->port_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameSession::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameSession

// string gameSessionId = 1;
void GameSession::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GameSession::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
  return gamesessionid_.GetNoArena();
}
void GameSession::set_gamesessionid(const ::std::string& value) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
}
#if LANG_CXX11
void GameSession::set_gamesessionid(::std::string&& value) {
  
  gamesessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
}
#endif
void GameSession::set_gamesessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
}
void GameSession::set_gamesessionid(const char* value, size_t size) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
}
::std::string* GameSession::mutable_gamesessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameSession::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
  
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameSession::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    
  } else {
    
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
}

// string fleetId = 2;
void GameSession::clear_fleetid() {
  fleetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GameSession::fleetid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
  return fleetid_.GetNoArena();
}
void GameSession::set_fleetid(const ::std::string& value) {
  
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
}
#if LANG_CXX11
void GameSession::set_fleetid(::std::string&& value) {
  
  fleetid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
}
#endif
void GameSession::set_fleetid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
}
void GameSession::set_fleetid(const char* value, size_t size) {
  
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
}
::std::string* GameSession::mutable_fleetid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
  return fleetid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameSession::release_fleetid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
  
  return fleetid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameSession::set_allocated_fleetid(::std::string* fleetid) {
  if (fleetid != NULL) {
    
  } else {
    
  }
  fleetid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleetid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
}

// string name = 3;
void GameSession::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GameSession::name() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
  return name_.GetNoArena();
}
void GameSession::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
}
#if LANG_CXX11
void GameSession::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
}
#endif
void GameSession::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
}
void GameSession::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
}
::std::string* GameSession::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameSession::release_name() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameSession::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
}

// int32 maxPlayers = 4;
void GameSession::clear_maxplayers() {
  maxplayers_ = 0;
}
::google::protobuf::int32 GameSession::maxplayers() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.maxPlayers)
  return maxplayers_;
}
void GameSession::set_maxplayers(::google::protobuf::int32 value) {
  
  maxplayers_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.maxPlayers)
}

// bool joinable = 5;
void GameSession::clear_joinable() {
  joinable_ = false;
}
bool GameSession::joinable() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.joinable)
  return joinable_;
}
void GameSession::set_joinable(bool value) {
  
  joinable_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.joinable)
}

// repeated .com.amazon.whitewater.auxproxy.pbuffer.GameProperty gameProperties = 6;
int GameSession::gameproperties_size() const {
  return gameproperties_.size();
}
void GameSession::clear_gameproperties() {
  gameproperties_.Clear();
}
const ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty& GameSession::gameproperties(int index) const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameProperties)
  return gameproperties_.Get(index);
}
::com::amazon::whitewater::auxproxy::pbuffer::GameProperty* GameSession::mutable_gameproperties(int index) {
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameProperties)
  return gameproperties_.Mutable(index);
}
::com::amazon::whitewater::auxproxy::pbuffer::GameProperty* GameSession::add_gameproperties() {
  // @@protoc_insertion_point(field_add:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameProperties)
  return gameproperties_.Add();
}
::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty >*
GameSession::mutable_gameproperties() {
  // @@protoc_insertion_point(field_mutable_list:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameProperties)
  return &gameproperties_;
}
const ::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty >&
GameSession::gameproperties() const {
  // @@protoc_insertion_point(field_list:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameProperties)
  return gameproperties_;
}

// string ipAddress = 7;
void GameSession::clear_ipaddress() {
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GameSession::ipaddress() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress)
  return ipaddress_.GetNoArena();
}
void GameSession::set_ipaddress(const ::std::string& value) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress)
}
#if LANG_CXX11
void GameSession::set_ipaddress(::std::string&& value) {
  
  ipaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress)
}
#endif
void GameSession::set_ipaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress)
}
void GameSession::set_ipaddress(const char* value, size_t size) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress)
}
::std::string* GameSession::mutable_ipaddress() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress)
  return ipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameSession::release_ipaddress() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress)
  
  return ipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameSession::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress != NULL) {
    
  } else {
    
  }
  ipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddress);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress)
}

// int32 port = 8;
void GameSession::clear_port() {
  port_ = 0;
}
::google::protobuf::int32 GameSession::port() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.port)
  return port_;
}
void GameSession::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.port)
}

// string gameSessionData = 9;
void GameSession::clear_gamesessiondata() {
  gamesessiondata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GameSession::gamesessiondata() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData)
  return gamesessiondata_.GetNoArena();
}
void GameSession::set_gamesessiondata(const ::std::string& value) {
  
  gamesessiondata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData)
}
#if LANG_CXX11
void GameSession::set_gamesessiondata(::std::string&& value) {
  
  gamesessiondata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData)
}
#endif
void GameSession::set_gamesessiondata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gamesessiondata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData)
}
void GameSession::set_gamesessiondata(const char* value, size_t size) {
  
  gamesessiondata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData)
}
::std::string* GameSession::mutable_gamesessiondata() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData)
  return gamesessiondata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameSession::release_gamesessiondata() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData)
  
  return gamesessiondata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameSession::set_allocated_gamesessiondata(::std::string* gamesessiondata) {
  if (gamesessiondata != NULL) {
    
  } else {
    
  }
  gamesessiondata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessiondata);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData)
}

// string matchmakerData = 10;
void GameSession::clear_matchmakerdata() {
  matchmakerdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GameSession::matchmakerdata() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData)
  return matchmakerdata_.GetNoArena();
}
void GameSession::set_matchmakerdata(const ::std::string& value) {
  
  matchmakerdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData)
}
#if LANG_CXX11
void GameSession::set_matchmakerdata(::std::string&& value) {
  
  matchmakerdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData)
}
#endif
void GameSession::set_matchmakerdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  matchmakerdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData)
}
void GameSession::set_matchmakerdata(const char* value, size_t size) {
  
  matchmakerdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData)
}
::std::string* GameSession::mutable_matchmakerdata() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData)
  return matchmakerdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameSession::release_matchmakerdata() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData)
  
  return matchmakerdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameSession::set_allocated_matchmakerdata(::std::string* matchmakerdata) {
  if (matchmakerdata != NULL) {
    
  } else {
    
  }
  matchmakerdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), matchmakerdata);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData)
}

// string dnsName = 11;
void GameSession::clear_dnsname() {
  dnsname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GameSession::dnsname() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName)
  return dnsname_.GetNoArena();
}
void GameSession::set_dnsname(const ::std::string& value) {
  
  dnsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName)
}
#if LANG_CXX11
void GameSession::set_dnsname(::std::string&& value) {
  
  dnsname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName)
}
#endif
void GameSession::set_dnsname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dnsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName)
}
void GameSession::set_dnsname(const char* value, size_t size) {
  
  dnsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName)
}
::std::string* GameSession::mutable_dnsname() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName)
  return dnsname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameSession::release_dnsname() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName)
  
  return dnsname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameSession::set_allocated_dnsname(::std::string* dnsname) {
  if (dnsname != NULL) {
    
  } else {
    
  }
  dnsname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dnsname);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameProperty::kKeyFieldNumber;
const int GameProperty::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameProperty::GameProperty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
}
GameProperty::GameProperty(const GameProperty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
}

void GameProperty::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GameProperty::~GameProperty() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  SharedDtor();
}

void GameProperty::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameProperty::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameProperty& GameProperty::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameProperty* GameProperty::New(::google::protobuf::Arena* arena) const {
  GameProperty* n = new GameProperty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GameProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  return false;
#undef DO_
}

void GameProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
}

::google::protobuf::uint8* GameProperty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  return target;
}

size_t GameProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  size_t total_size = 0;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameProperty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const GameProperty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameProperty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
    MergeFrom(*source);
  }
}

void GameProperty::MergeFrom(const GameProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void GameProperty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameProperty::CopyFrom(const GameProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameProperty::IsInitialized() const {
  return true;
}

void GameProperty::Swap(GameProperty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameProperty::InternalSwap(GameProperty* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameProperty::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameProperty

// string key = 1;
void GameProperty::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GameProperty::key() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
  return key_.GetNoArena();
}
void GameProperty::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
}
#if LANG_CXX11
void GameProperty::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
}
#endif
void GameProperty::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
}
void GameProperty::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
}
::std::string* GameProperty::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameProperty::release_key() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameProperty::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
}

// string value = 2;
void GameProperty::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GameProperty::value() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
  return value_.GetNoArena();
}
void GameProperty::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
}
#if LANG_CXX11
void GameProperty::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
}
#endif
void GameProperty::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
}
void GameProperty::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
}
::std::string* GameProperty::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GameProperty::release_value() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GameProperty::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerSession::kPlayerSessionIdFieldNumber;
const int PlayerSession::kPlayerIdFieldNumber;
const int PlayerSession::kGameSessionIdFieldNumber;
const int PlayerSession::kFleetIdFieldNumber;
const int PlayerSession::kIpAddressFieldNumber;
const int PlayerSession::kStatusFieldNumber;
const int PlayerSession::kCreationTimeFieldNumber;
const int PlayerSession::kTerminationTimeFieldNumber;
const int PlayerSession::kPortFieldNumber;
const int PlayerSession::kPlayerDataFieldNumber;
const int PlayerSession::kDnsNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerSession::PlayerSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
}
PlayerSession::PlayerSession(const PlayerSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playersessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playersessionid().size() > 0) {
    playersessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playerid().size() > 0) {
    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.gamesessionid().size() > 0) {
    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  fleetid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fleetid().size() > 0) {
    fleetid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fleetid_);
  }
  ipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ipaddress().size() > 0) {
    ipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  playerdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playerdata().size() > 0) {
    playerdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerdata_);
  }
  dnsname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dnsname().size() > 0) {
    dnsname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dnsname_);
  }
  ::memcpy(&creationtime_, &from.creationtime_,
    reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&creationtime_) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
}

void PlayerSession::SharedCtor() {
  playersessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessionid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fleetid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dnsname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&creationtime_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&creationtime_) + sizeof(port_));
  _cached_size_ = 0;
}

PlayerSession::~PlayerSession() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  SharedDtor();
}

void PlayerSession::SharedDtor() {
  playersessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessionid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fleetid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dnsname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSession::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerSession& PlayerSession::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerSession* PlayerSession::New(::google::protobuf::Arena* arena) const {
  PlayerSession* n = new PlayerSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fleetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playerdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dnsname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&creationtime_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&creationtime_) + sizeof(port_));
}

bool PlayerSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string playerSessionId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playersessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playersessionid().data(), this->playersessionid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string playerId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gameSessionId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamesessionid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gamesessionid().data(), this->gamesessionid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fleetId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fleetid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fleetid().data(), this->fleetid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ipAddress = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddress()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ipaddress().data(), this->ipaddress().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 creationTime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &creationtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 terminationTime = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &terminationtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string playerData = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerdata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playerdata().data(), this->playerdata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dnsName = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dnsname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dnsname().data(), this->dnsname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  return false;
#undef DO_
}

void PlayerSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerSessionId = 1;
  if (this->playersessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playersessionid().data(), this->playersessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->playersessionid(), output);
  }

  // string playerId = 2;
  if (this->playerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playerid(), output);
  }

  // string gameSessionId = 3;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gamesessionid(), output);
  }

  // string fleetId = 4;
  if (this->fleetid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fleetid().data(), this->fleetid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fleetid(), output);
  }

  // string ipAddress = 5;
  if (this->ipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ipaddress(), output);
  }

  // string status = 6;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->status(), output);
  }

  // int64 creationTime = 7;
  if (this->creationtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->creationtime(), output);
  }

  // int64 terminationTime = 8;
  if (this->terminationtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->terminationtime(), output);
  }

  // int32 port = 9;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->port(), output);
  }

  // string playerData = 10;
  if (this->playerdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playerdata().data(), this->playerdata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->playerdata(), output);
  }

  // string dnsName = 11;
  if (this->dnsname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dnsname().data(), this->dnsname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->dnsname(), output);
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
}

::google::protobuf::uint8* PlayerSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerSessionId = 1;
  if (this->playersessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playersessionid().data(), this->playersessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playersessionid(), target);
  }

  // string playerId = 2;
  if (this->playerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playerid(), target);
  }

  // string gameSessionId = 3;
  if (this->gamesessionid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gamesessionid().data(), this->gamesessionid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gamesessionid(), target);
  }

  // string fleetId = 4;
  if (this->fleetid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fleetid().data(), this->fleetid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fleetid(), target);
  }

  // string ipAddress = 5;
  if (this->ipaddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ipaddress().data(), this->ipaddress().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ipaddress(), target);
  }

  // string status = 6;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->status(), target);
  }

  // int64 creationTime = 7;
  if (this->creationtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->creationtime(), target);
  }

  // int64 terminationTime = 8;
  if (this->terminationtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->terminationtime(), target);
  }

  // int32 port = 9;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->port(), target);
  }

  // string playerData = 10;
  if (this->playerdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playerdata().data(), this->playerdata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->playerdata(), target);
  }

  // string dnsName = 11;
  if (this->dnsname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dnsname().data(), this->dnsname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->dnsname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  return target;
}

size_t PlayerSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  size_t total_size = 0;

  // string playerSessionId = 1;
  if (this->playersessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playersessionid());
  }

  // string playerId = 2;
  if (this->playerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playerid());
  }

  // string gameSessionId = 3;
  if (this->gamesessionid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gamesessionid());
  }

  // string fleetId = 4;
  if (this->fleetid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fleetid());
  }

  // string ipAddress = 5;
  if (this->ipaddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ipaddress());
  }

  // string status = 6;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // string playerData = 10;
  if (this->playerdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playerdata());
  }

  // string dnsName = 11;
  if (this->dnsname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dnsname());
  }

  // int64 creationTime = 7;
  if (this->creationtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->creationtime());
  }

  // int64 terminationTime = 8;
  if (this->terminationtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->terminationtime());
  }

  // int32 port = 9;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
    MergeFrom(*source);
  }
}

void PlayerSession::MergeFrom(const PlayerSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playersessionid().size() > 0) {

    playersessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playersessionid_);
  }
  if (from.playerid().size() > 0) {

    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  if (from.gamesessionid().size() > 0) {

    gamesessionid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamesessionid_);
  }
  if (from.fleetid().size() > 0) {

    fleetid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fleetid_);
  }
  if (from.ipaddress().size() > 0) {

    ipaddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipaddress_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.playerdata().size() > 0) {

    playerdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerdata_);
  }
  if (from.dnsname().size() > 0) {

    dnsname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dnsname_);
  }
  if (from.creationtime() != 0) {
    set_creationtime(from.creationtime());
  }
  if (from.terminationtime() != 0) {
    set_terminationtime(from.terminationtime());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void PlayerSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSession::CopyFrom(const PlayerSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSession::IsInitialized() const {
  return true;
}

void PlayerSession::Swap(PlayerSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerSession::InternalSwap(PlayerSession* other) {
  playersessionid_.Swap(&other->playersessionid_);
  playerid_.Swap(&other->playerid_);
  gamesessionid_.Swap(&other->gamesessionid_);
  fleetid_.Swap(&other->fleetid_);
  ipaddress_.Swap(&other->ipaddress_);
  status_.Swap(&other->status_);
  playerdata_.Swap(&other->playerdata_);
  dnsname_.Swap(&other->dnsname_);
  std::swap(creationtime_, other->creationtime_);
  std::swap(terminationtime_, other->terminationtime_);
  std::swap(port_, other->port_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerSession::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerSession

// string playerSessionId = 1;
void PlayerSession::clear_playersessionid() {
  playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlayerSession::playersessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
  return playersessionid_.GetNoArena();
}
void PlayerSession::set_playersessionid(const ::std::string& value) {
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
}
#if LANG_CXX11
void PlayerSession::set_playersessionid(::std::string&& value) {
  
  playersessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
}
#endif
void PlayerSession::set_playersessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
}
void PlayerSession::set_playersessionid(const char* value, size_t size) {
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
}
::std::string* PlayerSession::mutable_playersessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
  return playersessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerSession::release_playersessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
  
  return playersessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerSession::set_allocated_playersessionid(::std::string* playersessionid) {
  if (playersessionid != NULL) {
    
  } else {
    
  }
  playersessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playersessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
}

// string playerId = 2;
void PlayerSession::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlayerSession::playerid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
  return playerid_.GetNoArena();
}
void PlayerSession::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
}
#if LANG_CXX11
void PlayerSession::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
}
#endif
void PlayerSession::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
}
void PlayerSession::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
}
::std::string* PlayerSession::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerSession::release_playerid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerSession::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
}

// string gameSessionId = 3;
void PlayerSession::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlayerSession::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
  return gamesessionid_.GetNoArena();
}
void PlayerSession::set_gamesessionid(const ::std::string& value) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
}
#if LANG_CXX11
void PlayerSession::set_gamesessionid(::std::string&& value) {
  
  gamesessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
}
#endif
void PlayerSession::set_gamesessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
}
void PlayerSession::set_gamesessionid(const char* value, size_t size) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
}
::std::string* PlayerSession::mutable_gamesessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerSession::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
  
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerSession::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    
  } else {
    
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
}

// string fleetId = 4;
void PlayerSession::clear_fleetid() {
  fleetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlayerSession::fleetid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
  return fleetid_.GetNoArena();
}
void PlayerSession::set_fleetid(const ::std::string& value) {
  
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
}
#if LANG_CXX11
void PlayerSession::set_fleetid(::std::string&& value) {
  
  fleetid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
}
#endif
void PlayerSession::set_fleetid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
}
void PlayerSession::set_fleetid(const char* value, size_t size) {
  
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
}
::std::string* PlayerSession::mutable_fleetid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
  return fleetid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerSession::release_fleetid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
  
  return fleetid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerSession::set_allocated_fleetid(::std::string* fleetid) {
  if (fleetid != NULL) {
    
  } else {
    
  }
  fleetid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleetid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
}

// string ipAddress = 5;
void PlayerSession::clear_ipaddress() {
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlayerSession::ipaddress() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
  return ipaddress_.GetNoArena();
}
void PlayerSession::set_ipaddress(const ::std::string& value) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
}
#if LANG_CXX11
void PlayerSession::set_ipaddress(::std::string&& value) {
  
  ipaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
}
#endif
void PlayerSession::set_ipaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
}
void PlayerSession::set_ipaddress(const char* value, size_t size) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
}
::std::string* PlayerSession::mutable_ipaddress() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
  return ipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerSession::release_ipaddress() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
  
  return ipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerSession::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress != NULL) {
    
  } else {
    
  }
  ipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddress);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
}

// string status = 6;
void PlayerSession::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlayerSession::status() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
  return status_.GetNoArena();
}
void PlayerSession::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
}
#if LANG_CXX11
void PlayerSession::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
}
#endif
void PlayerSession::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
}
void PlayerSession::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
}
::std::string* PlayerSession::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerSession::release_status() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerSession::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
}

// int64 creationTime = 7;
void PlayerSession::clear_creationtime() {
  creationtime_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 PlayerSession::creationtime() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.creationTime)
  return creationtime_;
}
void PlayerSession::set_creationtime(::google::protobuf::int64 value) {
  
  creationtime_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.creationTime)
}

// int64 terminationTime = 8;
void PlayerSession::clear_terminationtime() {
  terminationtime_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 PlayerSession::terminationtime() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.terminationTime)
  return terminationtime_;
}
void PlayerSession::set_terminationtime(::google::protobuf::int64 value) {
  
  terminationtime_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.terminationTime)
}

// int32 port = 9;
void PlayerSession::clear_port() {
  port_ = 0;
}
::google::protobuf::int32 PlayerSession::port() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.port)
  return port_;
}
void PlayerSession::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.port)
}

// string playerData = 10;
void PlayerSession::clear_playerdata() {
  playerdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlayerSession::playerdata() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
  return playerdata_.GetNoArena();
}
void PlayerSession::set_playerdata(const ::std::string& value) {
  
  playerdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
}
#if LANG_CXX11
void PlayerSession::set_playerdata(::std::string&& value) {
  
  playerdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
}
#endif
void PlayerSession::set_playerdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
}
void PlayerSession::set_playerdata(const char* value, size_t size) {
  
  playerdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
}
::std::string* PlayerSession::mutable_playerdata() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
  return playerdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerSession::release_playerdata() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
  
  return playerdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerSession::set_allocated_playerdata(::std::string* playerdata) {
  if (playerdata != NULL) {
    
  } else {
    
  }
  playerdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerdata);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
}

// string dnsName = 11;
void PlayerSession::clear_dnsname() {
  dnsname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PlayerSession::dnsname() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName)
  return dnsname_.GetNoArena();
}
void PlayerSession::set_dnsname(const ::std::string& value) {
  
  dnsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName)
}
#if LANG_CXX11
void PlayerSession::set_dnsname(::std::string&& value) {
  
  dnsname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName)
}
#endif
void PlayerSession::set_dnsname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dnsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName)
}
void PlayerSession::set_dnsname(const char* value, size_t size) {
  
  dnsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName)
}
::std::string* PlayerSession::mutable_dnsname() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName)
  return dnsname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PlayerSession::release_dnsname() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName)
  
  return dnsname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PlayerSession::set_allocated_dnsname(::std::string* dnsname) {
  if (dnsname != NULL) {
    
  } else {
    
  }
  dnsname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dnsname);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Player::Player_PlayerAttributesEntry::Player_PlayerAttributesEntry() {}
Player::Player_PlayerAttributesEntry::Player_PlayerAttributesEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata Player::Player_PlayerAttributesEntry::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[23];
}
void Player::Player_PlayerAttributesEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void Player::Player_PlayerAttributesEntry::MergeFrom(const Player_PlayerAttributesEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Player::Player_LatencyInMsEntry::Player_LatencyInMsEntry() {}
Player::Player_LatencyInMsEntry::Player_LatencyInMsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata Player::Player_LatencyInMsEntry::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[24];
}
void Player::Player_LatencyInMsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void Player::Player_LatencyInMsEntry::MergeFrom(const Player_LatencyInMsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Player::kPlayerIdFieldNumber;
const int Player::kPlayerAttributesFieldNumber;
const int Player::kTeamFieldNumber;
const int Player::kLatencyInMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Player::Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.Player)
}
Player::Player(const Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerattributes_.MergeFrom(from.playerattributes_);
  latencyinms_.MergeFrom(from.latencyinms_);
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playerid().size() > 0) {
    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  team_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.team().size() > 0) {
    team_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_);
  }
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.Player)
}

void Player::SharedCtor() {
  playerid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.Player)
  SharedDtor();
}

void Player::SharedDtor() {
  playerid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Player& Player::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

Player* Player::New(::google::protobuf::Arena* arena) const {
  Player* n = new Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  playerattributes_.Clear();
  latencyinms_.Clear();
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string playerId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playerid().data(), this->playerid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.Player.playerId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .com.amazon.whitewater.auxproxy.pbuffer.AttributeValue> playerAttributes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          Player_PlayerAttributesEntry::Parser< ::google::protobuf::internal::MapField<
              Player_PlayerAttributesEntry,
              ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue > > parser(&playerattributes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.Player.PlayerAttributesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string team = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->team().data(), this->team().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.Player.team"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int32> latencyInMs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          Player_LatencyInMsEntry::Parser< ::google::protobuf::internal::MapField<
              Player_LatencyInMsEntry,
              ::std::string, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 > > parser(&latencyinms_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.Player.LatencyInMsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.Player)
  return false;
#undef DO_
}

void Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerId = 1;
  if (this->playerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.Player.playerId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->playerid(), output);
  }

  // map<string, .com.amazon.whitewater.auxproxy.pbuffer.AttributeValue> playerAttributes = 2;
  if (!this->playerattributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "com.amazon.whitewater.auxproxy.pbuffer.Player.PlayerAttributesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->playerattributes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->playerattributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::const_iterator
          it = this->playerattributes().begin();
          it != this->playerattributes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Player_PlayerAttributesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(playerattributes_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Player_PlayerAttributesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::const_iterator
          it = this->playerattributes().begin();
          it != this->playerattributes().end(); ++it) {
        entry.reset(playerattributes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // string team = 3;
  if (this->team().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team().data(), this->team().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.Player.team");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team(), output);
  }

  // map<string, int32> latencyInMs = 4;
  if (!this->latencyinms().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "com.amazon.whitewater.auxproxy.pbuffer.Player.LatencyInMsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->latencyinms().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->latencyinms().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->latencyinms().begin();
          it != this->latencyinms().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Player_LatencyInMsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(latencyinms_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Player_LatencyInMsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->latencyinms().begin();
          it != this->latencyinms().end(); ++it) {
        entry.reset(latencyinms_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.Player)
}

::google::protobuf::uint8* Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerId = 1;
  if (this->playerid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playerid().data(), this->playerid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.Player.playerId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerid(), target);
  }

  // map<string, .com.amazon.whitewater.auxproxy.pbuffer.AttributeValue> playerAttributes = 2;
  if (!this->playerattributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "com.amazon.whitewater.auxproxy.pbuffer.Player.PlayerAttributesEntry.key");
      }
    };

    if (deterministic &&
        this->playerattributes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->playerattributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::const_iterator
          it = this->playerattributes().begin();
          it != this->playerattributes().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Player_PlayerAttributesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(playerattributes_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Player_PlayerAttributesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::const_iterator
          it = this->playerattributes().begin();
          it != this->playerattributes().end(); ++it) {
        entry.reset(playerattributes_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // string team = 3;
  if (this->team().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->team().data(), this->team().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.Player.team");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team(), target);
  }

  // map<string, int32> latencyInMs = 4;
  if (!this->latencyinms().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "com.amazon.whitewater.auxproxy.pbuffer.Player.LatencyInMsEntry.key");
      }
    };

    if (deterministic &&
        this->latencyinms().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->latencyinms().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->latencyinms().begin();
          it != this->latencyinms().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<Player_LatencyInMsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(latencyinms_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Player_LatencyInMsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->latencyinms().begin();
          it != this->latencyinms().end(); ++it) {
        entry.reset(latencyinms_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  size_t total_size = 0;

  // map<string, .com.amazon.whitewater.auxproxy.pbuffer.AttributeValue> playerAttributes = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->playerattributes_size());
  {
    ::google::protobuf::scoped_ptr<Player_PlayerAttributesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >::const_iterator
        it = this->playerattributes().begin();
        it != this->playerattributes().end(); ++it) {
      entry.reset(playerattributes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, int32> latencyInMs = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->latencyinms_size());
  {
    ::google::protobuf::scoped_ptr<Player_LatencyInMsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->latencyinms().begin();
        it != this->latencyinms().end(); ++it) {
      entry.reset(latencyinms_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string playerId = 1;
  if (this->playerid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playerid());
  }

  // string team = 3;
  if (this->team().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.Player)
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  playerattributes_.MergeFrom(from.playerattributes_);
  latencyinms_.MergeFrom(from.latencyinms_);
  if (from.playerid().size() > 0) {

    playerid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerid_);
  }
  if (from.team().size() > 0) {

    team_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_);
  }
}

void Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::Swap(Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Player::InternalSwap(Player* other) {
  playerattributes_.Swap(&other->playerattributes_);
  latencyinms_.Swap(&other->latencyinms_);
  playerid_.Swap(&other->playerid_);
  team_.Swap(&other->team_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Player::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Player

// string playerId = 1;
void Player::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Player::playerid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.Player.playerId)
  return playerid_.GetNoArena();
}
void Player::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.Player.playerId)
}
#if LANG_CXX11
void Player::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.Player.playerId)
}
#endif
void Player::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.Player.playerId)
}
void Player::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.Player.playerId)
}
::std::string* Player::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.Player.playerId)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Player::release_playerid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.Player.playerId)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Player::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.Player.playerId)
}

// map<string, .com.amazon.whitewater.auxproxy.pbuffer.AttributeValue> playerAttributes = 2;
int Player::playerattributes_size() const {
  return playerattributes_.size();
}
void Player::clear_playerattributes() {
  playerattributes_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >&
Player::playerattributes() const {
  // @@protoc_insertion_point(field_map:com.amazon.whitewater.auxproxy.pbuffer.Player.playerAttributes)
  return playerattributes_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >*
Player::mutable_playerattributes() {
  // @@protoc_insertion_point(field_mutable_map:com.amazon.whitewater.auxproxy.pbuffer.Player.playerAttributes)
  return playerattributes_.MutableMap();
}

// string team = 3;
void Player::clear_team() {
  team_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Player::team() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.Player.team)
  return team_.GetNoArena();
}
void Player::set_team(const ::std::string& value) {
  
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.Player.team)
}
#if LANG_CXX11
void Player::set_team(::std::string&& value) {
  
  team_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.Player.team)
}
#endif
void Player::set_team(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.Player.team)
}
void Player::set_team(const char* value, size_t size) {
  
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.Player.team)
}
::std::string* Player::mutable_team() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.Player.team)
  return team_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Player::release_team() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.Player.team)
  
  return team_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Player::set_allocated_team(::std::string* team) {
  if (team != NULL) {
    
  } else {
    
  }
  team_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.Player.team)
}

// map<string, int32> latencyInMs = 4;
int Player::latencyinms_size() const {
  return latencyinms_.size();
}
void Player::clear_latencyinms() {
  latencyinms_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
Player::latencyinms() const {
  // @@protoc_insertion_point(field_map:com.amazon.whitewater.auxproxy.pbuffer.Player.latencyInMs)
  return latencyinms_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
Player::mutable_latencyinms() {
  // @@protoc_insertion_point(field_mutable_map:com.amazon.whitewater.auxproxy.pbuffer.Player.latencyInMs)
  return latencyinms_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

AttributeValue::AttributeValue_SDMEntry::AttributeValue_SDMEntry() {}
AttributeValue::AttributeValue_SDMEntry::AttributeValue_SDMEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata AttributeValue::AttributeValue_SDMEntry::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[26];
}
void AttributeValue::AttributeValue_SDMEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void AttributeValue::AttributeValue_SDMEntry::MergeFrom(const AttributeValue_SDMEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AttributeValue::kTypeFieldNumber;
const int AttributeValue::kSFieldNumber;
const int AttributeValue::kNFieldNumber;
const int AttributeValue::kSLFieldNumber;
const int AttributeValue::kSDMFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AttributeValue::AttributeValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
}
AttributeValue::AttributeValue(const AttributeValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sl_(from.sl_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sdm_.MergeFrom(from.sdm_);
  s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.s().size() > 0) {
    s_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_);
  }
  ::memcpy(&n_, &from.n_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&n_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
}

void AttributeValue::SharedCtor() {
  s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&n_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&n_) + sizeof(type_));
  _cached_size_ = 0;
}

AttributeValue::~AttributeValue() {
  // @@protoc_insertion_point(destructor:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  SharedDtor();
}

void AttributeValue::SharedDtor() {
  s_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AttributeValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttributeValue::descriptor() {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AttributeValue& AttributeValue::default_instance() {
  protobuf_sdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

AttributeValue* AttributeValue::New(::google::protobuf::Arena* arena) const {
  AttributeValue* n = new AttributeValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AttributeValue::Clear() {
// @@protoc_insertion_point(message_clear_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  sl_.Clear();
  sdm_.Clear();
  s_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&n_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&n_) + sizeof(type_));
}

bool AttributeValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string S = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->s().data(), this->s().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double N = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &n_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string SL = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sl(this->sl_size() - 1).data(),
            this->sl(this->sl_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, double> SDM = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          AttributeValue_SDMEntry::Parser< ::google::protobuf::internal::MapField<
              AttributeValue_SDMEntry,
              ::std::string, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::std::string, double > > parser(&sdm_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SDMEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  return false;
#undef DO_
}

void AttributeValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // string S = 2;
  if (this->s().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->s(), output);
  }

  // double N = 3;
  if (this->n() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->n(), output);
  }

  // repeated string SL = 4;
  for (int i = 0, n = this->sl_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sl(i).data(), this->sl(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sl(i), output);
  }

  // map<string, double> SDM = 5;
  if (!this->sdm().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SDMEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->sdm().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->sdm().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->sdm().begin();
          it != this->sdm().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<AttributeValue_SDMEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(sdm_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<AttributeValue_SDMEntry> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->sdm().begin();
          it != this->sdm().end(); ++it) {
        entry.reset(sdm_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
}

::google::protobuf::uint8* AttributeValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // string S = 2;
  if (this->s().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->s().data(), this->s().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->s(), target);
  }

  // double N = 3;
  if (this->n() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->n(), target);
  }

  // repeated string SL = 4;
  for (int i = 0, n = this->sl_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sl(i).data(), this->sl(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->sl(i), target);
  }

  // map<string, double> SDM = 5;
  if (!this->sdm().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SDMEntry.key");
      }
    };

    if (deterministic &&
        this->sdm().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->sdm().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->sdm().begin();
          it != this->sdm().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<AttributeValue_SDMEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(sdm_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<AttributeValue_SDMEntry> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->sdm().begin();
          it != this->sdm().end(); ++it) {
        entry.reset(sdm_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  return target;
}

size_t AttributeValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  size_t total_size = 0;

  // repeated string SL = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sl_size());
  for (int i = 0, n = this->sl_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sl(i));
  }

  // map<string, double> SDM = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sdm_size());
  {
    ::google::protobuf::scoped_ptr<AttributeValue_SDMEntry> entry;
    for (::google::protobuf::Map< ::std::string, double >::const_iterator
        it = this->sdm().begin();
        it != this->sdm().end(); ++it) {
      entry.reset(sdm_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string S = 2;
  if (this->s().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->s());
  }

  // double N = 3;
  if (this->n() != 0) {
    total_size += 1 + 8;
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttributeValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  GOOGLE_DCHECK_NE(&from, this);
  const AttributeValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AttributeValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
    MergeFrom(*source);
  }
}

void AttributeValue::MergeFrom(const AttributeValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sl_.MergeFrom(from.sl_);
  sdm_.MergeFrom(from.sdm_);
  if (from.s().size() > 0) {

    s_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_);
  }
  if (from.n() != 0) {
    set_n(from.n());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void AttributeValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttributeValue::CopyFrom(const AttributeValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeValue::IsInitialized() const {
  return true;
}

void AttributeValue::Swap(AttributeValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AttributeValue::InternalSwap(AttributeValue* other) {
  sl_.InternalSwap(&other->sl_);
  sdm_.Swap(&other->sdm_);
  s_.Swap(&other->s_);
  std::swap(n_, other->n_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AttributeValue::GetMetadata() const {
  protobuf_sdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AttributeValue

// int32 type = 1;
void AttributeValue::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 AttributeValue::type() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.type)
  return type_;
}
void AttributeValue::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.type)
}

// string S = 2;
void AttributeValue::clear_s() {
  s_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AttributeValue::s() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S)
  return s_.GetNoArena();
}
void AttributeValue::set_s(const ::std::string& value) {
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S)
}
#if LANG_CXX11
void AttributeValue::set_s(::std::string&& value) {
  
  s_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S)
}
#endif
void AttributeValue::set_s(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S)
}
void AttributeValue::set_s(const char* value, size_t size) {
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S)
}
::std::string* AttributeValue::mutable_s() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S)
  return s_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AttributeValue::release_s() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S)
  
  return s_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AttributeValue::set_allocated_s(::std::string* s) {
  if (s != NULL) {
    
  } else {
    
  }
  s_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S)
}

// double N = 3;
void AttributeValue::clear_n() {
  n_ = 0;
}
double AttributeValue::n() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.N)
  return n_;
}
void AttributeValue::set_n(double value) {
  
  n_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.N)
}

// repeated string SL = 4;
int AttributeValue::sl_size() const {
  return sl_.size();
}
void AttributeValue::clear_sl() {
  sl_.Clear();
}
const ::std::string& AttributeValue::sl(int index) const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
  return sl_.Get(index);
}
::std::string* AttributeValue::mutable_sl(int index) {
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
  return sl_.Mutable(index);
}
void AttributeValue::set_sl(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
  sl_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void AttributeValue::set_sl(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
  sl_.Mutable(index)->assign(std::move(value));
}
#endif
void AttributeValue::set_sl(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sl_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
}
void AttributeValue::set_sl(int index, const char* value, size_t size) {
  sl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
}
::std::string* AttributeValue::add_sl() {
  // @@protoc_insertion_point(field_add_mutable:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
  return sl_.Add();
}
void AttributeValue::add_sl(const ::std::string& value) {
  sl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
}
#if LANG_CXX11
void AttributeValue::add_sl(::std::string&& value) {
  sl_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
}
#endif
void AttributeValue::add_sl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
}
void AttributeValue::add_sl(const char* value, size_t size) {
  sl_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
AttributeValue::sl() const {
  // @@protoc_insertion_point(field_list:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
  return sl_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
AttributeValue::mutable_sl() {
  // @@protoc_insertion_point(field_mutable_list:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
  return &sl_;
}

// map<string, double> SDM = 5;
int AttributeValue::sdm_size() const {
  return sdm_.size();
}
void AttributeValue::clear_sdm() {
  sdm_.Clear();
}
 const ::google::protobuf::Map< ::std::string, double >&
AttributeValue::sdm() const {
  // @@protoc_insertion_point(field_map:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SDM)
  return sdm_.GetMap();
}
 ::google::protobuf::Map< ::std::string, double >*
AttributeValue::mutable_sdm() {
  // @@protoc_insertion_point(field_mutable_map:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SDM)
  return sdm_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pbuffer
}  // namespace auxproxy
}  // namespace whitewater
}  // namespace amazon
}  // namespace com

// @@protoc_insertion_point(global_scope)
